{
	"language": "Solidity",
	"sources": {
		"contracts/common/LayerrOwnable.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\nimport {AddressValue} from \"../lib/StorageTypes.sol\";\r\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\r\nimport {LAYERROWNABLE_OWNER_SLOT, LAYERROWNABLE_NEW_OWNER_SLOT} from \"./LayerrStorage.sol\";\r\n\r\n/**\r\n * @title LayerrOwnable\r\n * @author 0xth0mas (Layerr)\r\n * @notice ERC173 compliant ownership interface with two-step transfer/acceptance.\r\n * @dev LayerrOwnable uses two custom storage slots for current contract owner and new owner as defined in LayerrStorage.\r\n */\r\ncontract LayerrOwnable is IOwnable {\r\n    modifier onlyOwner() {\r\n        if (msg.sender != _getOwner()) {\r\n            revert NotContractOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyNewOwner() {\r\n        if (msg.sender != _getNewOwner()) {\r\n            revert NotContractOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current contract owner\r\n     */\r\n    function owner() external view returns(address _owner) {\r\n        _owner = _getOwner();\r\n    }\r\n\r\n    /**\r\n     * @notice Begins first step of ownership transfer. _newOwner will need to call acceptTransfer() to complete.\r\n     * @param _newOwner address to transfer ownership of contract to\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        _setNewOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Second step of ownership transfer called by the new contract owner.\r\n     */\r\n    function acceptTransfer() external onlyNewOwner {\r\n        address _previousOwner = _getOwner();\r\n\r\n        //set contract owner to new owner, clear out the newOwner value\r\n        _setOwner(_getNewOwner());\r\n        _setNewOwner(address(0));\r\n\r\n        emit OwnershipTransferred(_previousOwner, _getOwner());\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels ownership transfer to newOwner before the transfer is accepted.\r\n     */\r\n    function cancelTransfer() external onlyOwner {\r\n        _setNewOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice EIP165 supportsInterface for introspection\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\r\n        return interfaceID == 0x7f5828d0;\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n\r\n    /**\r\n     * @dev Internal helper function to load custom storage slot address value\r\n     */\r\n    function _getOwner() internal view returns(address _owner) {\r\n        AddressValue storage ownerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            ownerValue.slot := LAYERROWNABLE_OWNER_SLOT\r\n        }\r\n        _owner = ownerValue.value;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal helper function to set owner address in custom storage slot\r\n     */\r\n    function _setOwner(address _owner) internal {\r\n        AddressValue storage ownerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            ownerValue.slot := LAYERROWNABLE_OWNER_SLOT\r\n        }\r\n        ownerValue.value = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal helper function to load custom storage slot address value\r\n     */\r\n    function _getNewOwner() internal view returns(address _newOwner) {\r\n        AddressValue storage newOwnerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            newOwnerValue.slot := LAYERROWNABLE_NEW_OWNER_SLOT\r\n        }\r\n        _newOwner = newOwnerValue.value;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal helper function to set new owner address in custom storage slot\r\n     */\r\n    function _setNewOwner(address _newOwner) internal {\r\n        AddressValue storage newOwnerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            newOwnerValue.slot := LAYERROWNABLE_NEW_OWNER_SLOT\r\n        }\r\n        newOwnerValue.value = _newOwner;\r\n    }\r\n\r\n}"
		},
		"contracts/common/LayerrStorage.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\n/// @dev Storage slot for current owner calculated from keccak256('Layerr.LayerrOwnable.owner')\r\nbytes32 constant LAYERROWNABLE_OWNER_SLOT = 0xedc628ad38a73ae7d50600532f1bf21da1bfb1390b4f8174f361aca54d4c6b66;\r\n\r\n/// @dev Storage slot for pending ownership transfer calculated from keccak256('Layerr.LayerrOwnable.newOwner')\r\nbytes32 constant LAYERROWNABLE_NEW_OWNER_SLOT = 0x15c115ab76de082272ae65126522082d4aad634b6478097549f84086af3b84bc;\r\n\r\n/// @dev Storage slot for token name calculated from keccak256('Layerr.LayerrToken.name')\r\nbytes32 constant LAYERRTOKEN_NAME_SLOT = 0x7f84c61ed30727f282b62cab23f49ac7f4d263f04a4948416b7b9ba7f34a20dc;\r\n\r\n/// @dev Storage slot for token symbol calculated from keccak256('Layerr.LayerrToken.symbol')\r\nbytes32 constant LAYERRTOKEN_SYMBOL_SLOT = 0xdc0f2363b26c589c72caecd2357dae5fee235863060295a057e8d69d61a96d8a;\r\n\r\n/// @dev Storage slot for URI renderer calculated from keccak256('Layerr.LayerrToken.renderer')\r\nbytes32 constant LAYERRTOKEN_RENDERER_SLOT = 0x395b7021d979c3dbed0f5d530785632316942232113ba3dbe325dc167550e320;"
		},
		"contracts/interfaces/IERC165.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. \r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}"
		},
		"contracts/interfaces/ILayerr20.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ILayerr20\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerr20 interface defines functions required in an ERC20 token contract to callable by the LayerrMinter contract.\r\n */\r\ninterface ILayerr20 {\r\n    /// @dev Thrown when two or more sets of arrays are supplied that require equal lengths but differ in length.\r\n    error ArrayLengthMismatch();\r\n\r\n    /**\r\n     * @notice Mints tokens to the recipients in amounts specified\r\n     * @dev This function should be protected by a role so that it is not callable by any address\r\n     * @param recipients addresses to airdrop tokens to\r\n     * @param amounts amount of tokens to airdrop to recipients\r\n     */\r\n    function airdrop(address[] calldata recipients, uint256[] calldata amounts) external;\r\n\r\n    /**\r\n     * @notice Mints `amount` of ERC20 tokens to the `to` address\r\n     * @dev `minter` and `to` may be the same address but are passed as two separate parameters to properly account for\r\n     *      allowlist mints where a minter is using a delegated wallet to mint\r\n     * @param minter address that the minted amount will be credited to\r\n     * @param to address that will receive the tokens being minted\r\n     * @param amount amount of tokens being minted\r\n     */\r\n    function mint(address minter, address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burns `amount` of ERC20 tokens from the `from` address\r\n     * @dev This function should check that the caller has a sufficient spend allowance to burn these tokens\r\n     * @param from address that the tokens will be burned from\r\n     * @param amount amount of tokens to be burned\r\n     */\r\n    function burn(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Returns the total supply of ERC20 tokens in circulation.\r\n     */\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Returns the total number of tokens minted for the contract and the number of tokens minted by the `minter`\r\n     * @param minter address to check for number of tokens minted\r\n     * @return totalMinted total number of ERC20 tokens minted since token launch\r\n     * @return minterMinted total number of ERC20 tokens minted by the `minter`\r\n     */\r\n    function totalMintedTokenAndMinter(address minter) external view returns(uint256 totalMinted, uint256 minterMinted);\r\n}"
		},
		"contracts/interfaces/ILayerrMinter.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {MintOrder, MintParameters, MintToken, BurnToken, PaymentToken} from \"../lib/MinterStructs.sol\";\r\n\r\n/**\r\n * @title ILayerrMinter\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerrMinter interface defines functions required in the LayerrMinter to be callable by token contracts\r\n */\r\ninterface ILayerrMinter {\r\n\r\n    /// @dev Event emitted when a mint order is fulfilled\r\n    event MintOrderFulfilled(\r\n        bytes32 indexed mintParametersDigest,\r\n        address indexed minter,\r\n        uint256 indexed quantity\r\n    );\r\n\r\n    /// @dev Event emitted when a token contract updates an allowed signer for EIP712 signatures\r\n    event ContractAllowedSignerUpdate(\r\n        address indexed _contract,\r\n        address indexed _signer,\r\n        bool indexed _allowed\r\n    );\r\n\r\n    /// @dev Event emitted when a token contract updates an allowed oracle signer for offchain authorization of a wallet to use a signature\r\n    event ContractOracleUpdated(\r\n        address indexed _contract,\r\n        address indexed _oracle,\r\n        bool indexed _allowed\r\n    );\r\n\r\n    /// @dev Event emitted when a signer updates their nonce with LayerrMinter. Updating a nonce invalidates all previously signed EIP712 signatures.\r\n    event SignerNonceIncremented(\r\n        address indexed _signer,\r\n        uint256 indexed _nonce\r\n    );\r\n\r\n    /// @dev Event emitted when a specific signature's validity is updated with the LayerrMinter contract.\r\n    event SignatureValidityUpdated(\r\n        address indexed _contract,\r\n        bool indexed invalid,\r\n        bytes32 mintParametersDigests\r\n    );\r\n\r\n    /// @dev Thrown when the amount of native tokens supplied in msg.value is insufficient for the mint order\r\n    error InsufficientPayment();\r\n\r\n    /// @dev Thrown when a payment fails to be forwarded to the intended recipient\r\n    error PaymentFailed();\r\n\r\n    /// @dev Thrown when a MintParameters payment token uses a token type value other than native or ERC20\r\n    error InvalidPaymentTokenType();\r\n\r\n    /// @dev Thrown when a MintParameters burn token uses a token type value other than ERC20, ERC721 or ERC1155\r\n    error InvalidBurnTokenType();\r\n\r\n    /// @dev Thrown when a MintParameters mint token uses a token type value other than ERC20, ERC721 or ERC1155\r\n    error InvalidMintTokenType();\r\n\r\n    /// @dev Thrown when a MintParameters burn token uses a burn type value other than contract burn or send to dead\r\n    error InvalidBurnType();\r\n\r\n    /// @dev Thrown when a MintParameters burn token requires a specific burn token id and the tokenId supplied does not match\r\n    error InvalidBurnTokenId();\r\n\r\n    /// @dev Thrown when a MintParameters burn token requires a specific ERC721 token and the burn amount is greater than 1\r\n    error CannotBurnMultipleERC721WithSameId();\r\n\r\n    /// @dev Thrown when attempting to mint with MintParameters that have a start time greater than the current block time\r\n    error MintHasNotStarted();\r\n\r\n    /// @dev Thrown when attempting to mint with MintParameters that have an end time less than the current block time\r\n    error MintHasEnded();\r\n\r\n    /// @dev Thrown when a MintParameters has a merkleroot set but the supplied merkle proof is invalid\r\n    error InvalidMerkleProof();\r\n\r\n    /// @dev Thrown when a MintOrder will cause a token's minted supply to exceed the defined maximum supply in MintParameters\r\n    error MintExceedsMaxSupply();\r\n\r\n    /// @dev Thrown when a MintOrder will cause a minter's minted amount to exceed the defined max per wallet in MintParameters\r\n    error MintExceedsMaxPerWallet();\r\n\r\n    /// @dev Thrown when a MintParameters mint token has a specific ERC721 token and the mint amount is greater than 1\r\n    error CannotMintMultipleERC721WithSameId();\r\n\r\n    /// @dev Thrown when the recovered signer for the MintParameters is not an allowed signer for the mint token\r\n    error NotAllowedSigner();\r\n\r\n    /// @dev Thrown when the recovered signer's nonce does not match the current nonce in LayerrMinter\r\n    error SignerNonceInvalid();\r\n\r\n    /// @dev Thrown when a signature has been marked as invalid for a mint token contract\r\n    error SignatureInvalid();\r\n\r\n    /// @dev Thrown when MintParameters requires an oracle signature and the recovered signer is not an allowed oracle for the contract\r\n    error InvalidOracleSignature();\r\n\r\n    /// @dev Thrown when MintParameters has a max signature use set and the MintOrder will exceed the maximum uses\r\n    error ExceedsMaxSignatureUsage();\r\n\r\n    /// @dev Thrown when attempting to increment nonce on behalf of another account and the signature is invalid\r\n    error InvalidSignatureToIncrementNonce();\r\n\r\n    /**\r\n     * @notice This function is called by token contracts to update allowed signers for minting\r\n     * @param _signer address of the EIP712 signer\r\n     * @param _allowed if the `_signer` is allowed to sign for minting\r\n     */\r\n    function setContractAllowedSigner(address _signer, bool _allowed) external;\r\n\r\n    /**\r\n     * @notice This function is called by token contracts to update allowed oracles for offchain authorizations\r\n     * @param _oracle address of the oracle\r\n     * @param _allowed if the `_oracle` is allowed to sign offchain authorizations\r\n     */\r\n    function setContractAllowedOracle(address _oracle, bool _allowed) external;\r\n\r\n    /**\r\n     * @notice This function is called by token contracts to update validity of signatures for the LayerrMinter contract\r\n     * @dev `invalid` should be true to invalidate signatures, the default state of `invalid` being false means \r\n     *      a signature is valid for a contract assuming all other conditions are met\r\n     * @param mintParametersDigests an array of message digests for MintParameters to update validity of\r\n     * @param invalid if the supplied digests will be marked as valid or invalid\r\n     */\r\n    function setSignatureValidity(\r\n        bytes32[] calldata mintParametersDigests,\r\n        bool invalid\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Increments the nonce for a signer to invalidate all previous signed MintParameters\r\n     */\r\n    function incrementSignerNonce() external;\r\n\r\n    /**\r\n     * @notice Increments the nonce on behalf of another account by validating a signature from that account\r\n     * @dev The signature is an eth personal sign message of the current signer nonce plus the chain id\r\n     *      ex. current nonce 0 on chain 5 would be a signature of \\x19Ethereum Signed Message:\\n15\r\n     *          current nonce 50 on chain 1 would be a signature of \\x19Ethereum Signed Message:\\n251\r\n     * @param signer account to increment nonce for\r\n     * @param signature signature proof that the request is coming from the account\r\n     */\r\n    function incrementNonceFor(address signer, bytes calldata signature) external;\r\n\r\n    /**\r\n     * @notice Validates and processes a single MintOrder, tokens are minted to msg.sender\r\n     * @param mintOrder struct containing the details of the mint order\r\n     */\r\n    function mint(\r\n        MintOrder calldata mintOrder\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Validates and processes an array of MintOrders, tokens are minted to msg.sender\r\n     * @param mintOrders array of structs containing the details of the mint orders\r\n     */\r\n    function mintBatch(\r\n        MintOrder[] calldata mintOrders\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Validates and processes a single MintOrder, tokens are minted to `mintToWallet`\r\n     * @param mintToWallet the address tokens will be minted to\r\n     * @param mintOrder struct containing the details of the mint order\r\n     * @param paymentContext Contextual information related to the payment process\r\n     *                     (Note: This parameter is required for integration with \r\n     *                     the payment processor and does not impact the behavior \r\n     *                     of the function)\r\n     */\r\n    function mintTo(\r\n        address mintToWallet,\r\n        MintOrder calldata mintOrder,\r\n        uint256 paymentContext\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Validates and processes an array of MintOrders, tokens are minted to `mintToWallet`\r\n     * @param mintToWallet the address tokens will be minted to\r\n     * @param mintOrders array of structs containing the details of the mint orders\r\n     * @param paymentContext Contextual information related to the payment process\r\n     *                     (Note: This parameter is required for integration with \r\n     *                     the payment processor and does not impact the behavior \r\n     *                     of the function)\r\n     */\r\n    function mintBatchTo(\r\n        address mintToWallet,\r\n        MintOrder[] calldata mintOrders,\r\n        uint256 paymentContext\r\n    ) external payable;\r\n}"
		},
		"contracts/interfaces/ILayerrRenderer.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {ERC165} from \"./IERC165.sol\";\r\n\r\n/**\r\n * @title ILayerrRenderer\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerrRenderer interface defines functions required in LayerrRenderer to be callable by token contracts\r\n */\r\ninterface ILayerrRenderer is ERC165 {\r\n\r\n    enum RenderType {\r\n        LAYERR_HOSTED,\r\n        PREREVEAL,\r\n        BASE_PLUS_TOKEN\r\n    }\r\n\r\n    /// @dev Thrown when a payment fails for Layerr-hosted IPFS\r\n    error PaymentFailed();\r\n\r\n    /// @dev Thrown when a call is made for an owner-function by a non-contract owner\r\n    error NotContractOwner();\r\n\r\n    /// @dev Thrown when a signature is not made by the authorized account\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @notice Generates a tokenURI for the `contractAddress` and `tokenId`\r\n     * @param contractAddress token contract address to render a token URI for\r\n     * @param tokenId token id to render\r\n     * @return uri for the token metadata\r\n     */\r\n    function tokenURI(\r\n        address contractAddress,\r\n        uint256 tokenId\r\n    ) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Generates a contractURI for the `contractAddress`\r\n     * @param contractAddress contract address to render a contract URI for\r\n     * @return uri for the contract metadata\r\n     */\r\n    function contractURI(\r\n        address contractAddress\r\n    ) external view returns (string memory);\r\n}\r\n"
		},
		"contracts/interfaces/ILayerrToken.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ILayerrToken\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerrToken interface defines functions required to be supported by the Layerr platform\r\n */\r\ninterface ILayerrToken {\r\n\r\n    /// @dev Emitted when the contract is deployed so that it can be indexed and assigned to its owner\r\n    event LayerrContractDeployed();\r\n\r\n    /// @dev Emitted when a mint extension is updated to allowed or disallowed\r\n    event MintExtensionUpdated(address mintExtension, bool allowed);\r\n\r\n    /// @dev Emitted when the contract's renderer is updated\r\n    event RendererUpdated(address renderer);\r\n\r\n    /// @dev Thrown when a caller that is not a mint extension attempts to execute a mint function\r\n    error NotValidMintingExtension();\r\n\r\n    /// @dev Thrown when a non-owner attempts to execute an only owner function\r\n    error NotAuthorized();\r\n\r\n    /// @dev Thrown when attempting to withdraw funds from the contract and the call fails\r\n    error WithdrawFailed();\r\n\r\n    /**\r\n     * @return name the name of the token\r\n     */\r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @return symbol the token symbol\r\n     */\r\n    function symbol() external view returns(string memory);\r\n\r\n    /**\r\n     * @return renderer the address that will render token/contract URIs\r\n     */\r\n    function renderer() external view returns(address);\r\n    \r\n    /**\r\n     * @notice Sets the renderer for token/contract URIs\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _renderer address to set as the token/contract URI renderer\r\n     */\r\n    function setRenderer(address _renderer) external;\r\n\r\n    /**\r\n     * @notice Sets whether or not an address is allowed to call minting functions\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param _allowed if the mint extension is allowed to mint tokens\r\n     */\r\n    function setMintExtension(\r\n        address _extension,\r\n        bool _allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function calls the mint extension to update `_signer`'s allowance\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param _signer address of the signer to update\r\n     * @param _allowed if `_signer` is allowed to sign for `_extension`\r\n     */\r\n    function setContractAllowedSigner(\r\n        address _extension,\r\n        address _signer,\r\n        bool _allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function calls the mint extension to update `_oracle`'s allowance\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param _oracle address of the oracle to update\r\n     * @param _allowed if `_oracle` is allowed to sign for `_extension`\r\n     */\r\n    function setContractAllowedOracle(\r\n        address _extension,\r\n        address _oracle,\r\n        bool _allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function calls the mint extension to update signature validity\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param signatureDigests hash digests of signatures parameters to update\r\n     * @param invalid true if the signature digests should be marked as invalid\r\n     */\r\n    function setSignatureValidity(\r\n        address _extension,\r\n        bytes32[] calldata signatureDigests,\r\n        bool invalid\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function updates the ERC2981 royalty percentages\r\n     * @dev This function should be restricted to contract owners\r\n     * @param pct royalty percentage in BPS\r\n     * @param royaltyReciever address to receive royalties\r\n     */\r\n    function setRoyalty(\r\n        uint96 pct,\r\n        address royaltyReciever\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function updates the token contract's name and symbol\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _name new name for the token contract\r\n     * @param _symbol new symbol for the token contract\r\n     */\r\n    function editContract(\r\n        string calldata _name,\r\n        string calldata _symbol\r\n    ) external;\r\n}"
		},
		"contracts/interfaces/IOwnable.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {ERC165} from './IERC165.sol';\r\n\r\ninterface IOwnable is ERC165 {\r\n\r\n    /// @dev Thrown when a non-owner is attempting to perform an owner function\r\n    error NotContractOwner();\r\n\r\n    /// @dev Emitted when contract ownership is transferred to a new owner\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner    \r\n    /// @return The address of the owner.\r\n    function owner() view external returns(address);\r\n\t\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\r\n    /// @param _newOwner The address of the new owner of the contract    \r\n    function transferOwnership(address _newOwner) external;\t\r\n}\r\n"
		},
		"contracts/lib/ERC2981.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Simple ERC2981 NFT Royalty Standard implementation.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC2981.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/common/ERC2981.sol)\r\nabstract contract ERC2981 {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The royalty fee numerator exceeds the fee denominator.\r\n    error RoyaltyOverflow();\r\n\r\n    /// @dev The royalty receiver cannot be the zero address.\r\n    error RoyaltyReceiverIsZeroAddress();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The default royalty info is given by:\r\n    /// ```\r\n    ///     let packed := sload(_ERC2981_MASTER_SLOT_SEED)\r\n    ///     let receiver := shr(96, packed)\r\n    ///     let royaltyFraction := xor(packed, shl(96, receiver))\r\n    /// ```\r\n    ///\r\n    /// The per token royalty info is given by.\r\n    /// ```\r\n    ///     mstore(0x00, tokenId)\r\n    ///     mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n    ///     let packed := sload(keccak256(0x00, 0x40))\r\n    ///     let receiver := shr(96, packed)\r\n    ///     let royaltyFraction := xor(packed, shl(96, receiver))\r\n    /// ```\r\n    uint256 private constant _ERC2981_MASTER_SLOT_SEED = 0xaa4ec00224afccfdb7;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          ERC2981                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Checks that `_feeDenominator` is non-zero.\r\n    constructor() {\r\n        require(_feeDenominator() != 0, \"Fee denominator cannot be zero.\");\r\n    }\r\n\r\n    /// @dev Returns the denominator for the royalty amount.\r\n    /// Defaults to 10000, which represents fees in basis points.\r\n    /// Override this function to return a custom amount if needed.\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n\r\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-165\r\n    /// This function call must use less than 30000 gas.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let s := shr(224, interfaceId)\r\n            // ERC165: 0x01ffc9a7, ERC2981: 0x2a55205a.\r\n            result := or(eq(s, 0x01ffc9a7), eq(s, 0x2a55205a))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the `receiver` and `royaltyAmount` for `tokenId` sold at `salePrice`.\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        uint256 feeDenominator = _feeDenominator();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n            let packed := sload(keccak256(0x00, 0x40))\r\n            receiver := shr(96, packed)\r\n            if iszero(receiver) {\r\n                packed := sload(mload(0x20))\r\n                receiver := shr(96, packed)\r\n            }\r\n            let x := salePrice\r\n            let y := xor(packed, shl(96, receiver)) // `feeNumerator`.\r\n            // Overflow check, equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\r\n            // Out-of-gas revert. Should not be triggered in practice, but included for safety.\r\n            returndatacopy(returndatasize(), returndatasize(), mul(y, gt(x, div(not(0), y))))\r\n            royaltyAmount := div(mul(x, y), feeDenominator)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the default royalty `receiver` and `feeNumerator`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `receiver` must not be the zero address.\r\n    /// - `feeNumerator` must not be greater than the fee denominator.\r\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\r\n        uint256 feeDenominator = _feeDenominator();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            feeNumerator := shr(160, shl(160, feeNumerator))\r\n            if gt(feeNumerator, feeDenominator) {\r\n                mstore(0x00, 0x350a88b3) // `RoyaltyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            let packed := shl(96, receiver)\r\n            if iszero(packed) {\r\n                mstore(0x00, 0xb4457eaa) // `RoyaltyReceiverIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            sstore(_ERC2981_MASTER_SLOT_SEED, or(packed, feeNumerator))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the default royalty `receiver` and `feeNumerator` to zero.\r\n    function _deleteDefaultRoyalty() internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            sstore(_ERC2981_MASTER_SLOT_SEED, 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the royalty `receiver` and `feeNumerator` for `tokenId`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `receiver` must not be the zero address.\r\n    /// - `feeNumerator` must not be greater than the fee denominator.\r\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator)\r\n        internal\r\n        virtual\r\n    {\r\n        uint256 feeDenominator = _feeDenominator();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            feeNumerator := shr(160, shl(160, feeNumerator))\r\n            if gt(feeNumerator, feeDenominator) {\r\n                mstore(0x00, 0x350a88b3) // `RoyaltyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            let packed := shl(96, receiver)\r\n            if iszero(packed) {\r\n                mstore(0x00, 0xb4457eaa) // `RoyaltyReceiverIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n            sstore(keccak256(0x00, 0x40), or(packed, feeNumerator))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the royalty `receiver` and `feeNumerator` for `tokenId` to zero.\r\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n            sstore(keccak256(0x00, 0x40), 0)\r\n        }\r\n    }\r\n}"
		},
		"contracts/lib/MinterStructs.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev EIP712 Domain for signature verification\r\n */\r\nstruct EIP712Domain {\r\n    string name;\r\n    string version;\r\n    uint256 chainId;\r\n    address verifyingContract;\r\n}\r\n\r\n/**\r\n * @dev MintOrders contain MintParameters as defined by a token creator\r\n *      along with proofs required to validate the MintParameters and \r\n *      parameters specific to the mint being performed.\r\n * \r\n *      `mintParameters` are the parameters signed by the token creator\r\n *      `quantity` is a multiplier for mintTokens, burnTokens and paymentTokens\r\n *          defined in mintParameters\r\n *      `mintParametersSignature` is the signature from the token creator\r\n *      `oracleSignature` is a signature of the hash of the mintParameters digest \r\n *          and msg.sender. The recovered signer must be an allowed oracle for \r\n *          the token contract if oracleSignatureRequired is true for mintParameters.\r\n *      `merkleProof` is the proof that is checked if merkleRoot is not bytes(0) in\r\n *          mintParameters\r\n *      `suppliedBurnTokenIds` is an array of tokenIds to be used when processing\r\n *          burnTokens. There must be one item in the array for each ERC1155 burnToken\r\n *          regardless of `quantity` and `quantity` items in the array for each ERC721\r\n *          burnToken.\r\n *      `referrer` is the address that will receive a portion of a paymentToken if\r\n *          not address(0) and paymentToken's referralBPS is greater than 0\r\n *      `vaultWallet` is used for allowlist mints if the msg.sender address it not on\r\n *          the allowlist but their delegate.cash vault wallet is.\r\n *      \r\n */\r\nstruct MintOrder {\r\n    MintParameters mintParameters;\r\n    uint256 quantity;\r\n    bytes mintParametersSignature;\r\n    bytes oracleSignature;\r\n    bytes32[] merkleProof;\r\n    uint256[] suppliedBurnTokenIds;\r\n    address referrer;\r\n    address vaultWallet;\r\n}\r\n\r\n/**\r\n * @dev MintParameters define the tokens to be minted and conditions that must be met\r\n *      for the mint to be successfully processed.\r\n * \r\n *      `mintTokens` is an array of tokens that will be minted\r\n *      `burnTokens` is an array of tokens required to be burned\r\n *      `paymentTokens` is an array of tokens required as payment\r\n *      `startTime` is the UTC timestamp of when the mint will start\r\n *      `endTime` is the UTC timestamp of when the mint will end\r\n *      `signatureMaxUses` limits the number of mints that can be performed with the\r\n *          specific mintParameters/signature\r\n *      `merkleRoot` is the root of the merkletree for allowlist minting\r\n *      `nonce` is the signer nonce that can be incremented on the LayerrMinter \r\n *          contract to invalidate all previous signatures\r\n *      `oracleSignatureRequired` if true requires a secondary signature to process the mint\r\n */\r\nstruct MintParameters {\r\n    MintToken[] mintTokens;\r\n    BurnToken[] burnTokens;\r\n    PaymentToken[] paymentTokens;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 signatureMaxUses;\r\n    bytes32 merkleRoot;\r\n    uint256 nonce;\r\n    bool oracleSignatureRequired;\r\n}\r\n\r\n/**\r\n * @dev Defines the token that will be minted\r\n *      \r\n *      `contractAddress` address of contract to mint tokens from\r\n *      `specificTokenId` used for ERC721 - \r\n *          if true, mint is non-sequential ERC721\r\n *          if false, mint is sequential ERC721A\r\n *      `tokenType` is the type of token being minted defined in TokenTypes.sol\r\n *      `tokenId` the tokenId to mint if specificTokenId is true\r\n *      `mintAmount` is the quantity to be minted\r\n *      `maxSupply` is checked against the total minted amount at time of mint\r\n *          minting reverts if `mintAmount` * `quantity` will cause total minted to \r\n *          exceed `maxSupply`\r\n *      `maxMintPerWallet` is checked against the number minted for the wallet\r\n *          minting reverts if `mintAmount` * `quantity` will cause wallet minted to \r\n *          exceed `maxMintPerWallet`\r\n */\r\nstruct MintToken {\r\n    address contractAddress;\r\n    bool specificTokenId;\r\n    uint256 tokenType;\r\n    uint256 tokenId;\r\n    uint256 mintAmount;\r\n    uint256 maxSupply;\r\n    uint256 maxMintPerWallet;\r\n}\r\n\r\n/**\r\n * @dev Defines the token that will be burned\r\n *      \r\n *      `contractAddress` address of contract to burn tokens from\r\n *      `specificTokenId` specifies if the user has the option of choosing any token\r\n *          from the contract or if they must burn a specific token\r\n *      `tokenType` is the type of token being burned, defined in TokenTypes.sol\r\n *      `burnType` is the type of burn to perform, burn function call or transfer to \r\n *          dead address, defined in BurnType.sol\r\n *      `tokenId` the tokenId to burn if specificTokenId is true\r\n *      `burnAmount` is the quantity to be burned\r\n */\r\nstruct BurnToken {\r\n    address contractAddress;\r\n    bool specificTokenId;\r\n    uint256 tokenType;\r\n    uint256 burnType;\r\n    uint256 tokenId;\r\n    uint256 burnAmount;\r\n}\r\n\r\n/**\r\n * @dev Defines the token that will be used for payment\r\n *      \r\n *      `contractAddress` address of contract to for payment if ERC20\r\n *          if tokenType is native token then this should be set to 0x000...000\r\n *          to save calldata gas units\r\n *      `tokenType` is the type of token being used for payment, defined in TokenTypes.sol\r\n *      `payTo` the address that will receive the payment\r\n *      `paymentAmount` the amount for the payment in base units for the token\r\n *          ex. a native payment on Ethereum for 1 ETH would be specified in wei\r\n *          which would be 1**18 wei\r\n *      `referralBPS` is the percentage of the payment in BPS that will be sent to the \r\n *          `referrer` on the MintOrder if `referralBPS` is greater than 0 and `referrer`\r\n *          is not address(0)\r\n */\r\nstruct PaymentToken {\r\n    address contractAddress;\r\n    uint256 tokenType;\r\n    address payTo;\r\n    uint256 paymentAmount;\r\n    uint256 referralBPS;\r\n}\r\n"
		},
		"contracts/lib/StorageTypes.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\n/// @dev Simple struct to store a string value in a custom storage slot\r\nstruct StringValue {\r\n    string value;\r\n}\r\n\r\n/// @dev Simple struct to store an address value in a custom storage slot\r\nstruct AddressValue {\r\n    address value;\r\n}"
		},
		"contracts/tokens/ERC20/ERC20.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Simple ERC20 + EIP-2612 implementation.\r\n/// @author 0xth0mas (Layerr) - Modifications to Solady ERC20 to pack minted quantity with balance quantity\r\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\r\n/// @dev Note:\r\n/// The ERC20 standard allows minting and transferring to and from the zero address,\r\n/// minting and transferring zero tokens, as well as self-approvals.\r\n/// For performance, this implementation WILL NOT revert for such actions.\r\n/// Please add any checks with overrides if desired.\r\nabstract contract ERC20 {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The total supply has overflowed.\r\n    error TotalSupplyOverflow();\r\n\r\n    /// @dev The allowance has overflowed.\r\n    error AllowanceOverflow();\r\n\r\n    /// @dev The allowance has underflowed.\r\n    error AllowanceUnderflow();\r\n\r\n    /// @dev The balance has overflowed\r\n    error BalanceOverflow();\r\n\r\n    /// @dev Insufficient balance.\r\n    error InsufficientBalance();\r\n\r\n    /// @dev Insufficient allowance.\r\n    error InsufficientAllowance();\r\n\r\n    /// @dev The permit is invalid.\r\n    error InvalidPermit();\r\n\r\n    /// @dev The permit has expired.\r\n    error PermitExpired();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The storage slot for the total minted.\r\n    uint256 private constant _TOTAL_MINTED_SLOT = 0x05345cdf77eb68f44c;\r\n\r\n    /// @dev The storage slot for the total burned.\r\n    uint256 private constant _TOTAL_BURNED_SLOT = 0xc44f86be77fdc54350;\r\n\r\n    uint256 private constant _BALANCE_MASK = 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /// @dev The balance slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\r\n    /// ```\r\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\r\n\r\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\r\n    /// ```\r\n    ///     mstore(0x20, spender)\r\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\r\n    /// ```\r\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\r\n\r\n    /// @dev The nonce slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\r\n    /// ```\r\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       ERC20 METADATA                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Returns the name of the token.\r\n    function name() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the symbol of the token.\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the decimals places of the token.\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                           ERC20                            */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Returns the amount of tokens in existence.\r\n    function totalSupply() public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sub(sload(_TOTAL_MINTED_SLOT), sload(_TOTAL_BURNED_SLOT))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens minted.\r\n    function _totalMinted() internal view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_TOTAL_MINTED_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens burned.\r\n    function _totalBurned() internal view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_TOTAL_BURNED_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens owned by `owner`.\r\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := and(sload(keccak256(0x0c, 0x20)), _BALANCE_MASK)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens minted by `wallet`.\r\n    function _numberMinted(address wallet) internal view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, wallet)\r\n            result := shr(128, sload(keccak256(0x0c, 0x20)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x34))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and store the amount.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x34), amount)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function increaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowanceBefore := sload(allowanceSlot)\r\n            // Add to the allowance.\r\n            let allowanceAfter := add(allowanceBefore, difference)\r\n            // Revert upon overflow.\r\n            if lt(allowanceAfter, allowanceBefore) {\r\n                mstore(0x00, 0xf9067066) // `AllowanceOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Store the updated allowance.\r\n            sstore(allowanceSlot, allowanceAfter)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, allowanceAfter)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function decreaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowanceBefore := sload(allowanceSlot)\r\n            // Revert if will underflow.\r\n            if lt(allowanceBefore, difference) {\r\n                mstore(0x00, 0x8301ab38) // `AllowanceUnderflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated allowance.\r\n            let allowanceAfter := sub(allowanceBefore, difference)\r\n            sstore(allowanceSlot, allowanceAfter)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, allowanceAfter)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer `amount` tokens from the caller to `to`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _beforeTokenTransfer(msg.sender, to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalanceSlotValue := sload(fromBalanceSlot)\r\n            let fromBalance := and(fromBalanceSlotValue, _BALANCE_MASK)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, or(and(fromBalanceSlotValue, not(_BALANCE_MASK)), sub(fromBalance, amount)))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            let toBalanceSlotValue := sload(toBalanceSlot)\r\n            let toBalanceBefore := and(toBalanceSlotValue, _BALANCE_MASK)\r\n            let toBalanceAfter := add(toBalanceBefore, amount)\r\n            if gt(toBalanceAfter, _BALANCE_MASK) {\r\n                mstore(0x00, 0x89560ca1)\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Add and store the updated balance.\r\n            sstore(toBalanceSlot, or(and(toBalanceSlotValue, not(_BALANCE_MASK)), toBalanceAfter))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers `amount` tokens from `from` to `to`.\r\n    ///\r\n    /// Note: does not update the allowance if it is the maximum uint256 value.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        _beforeTokenTransfer(from, to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let from_ := shl(96, from)\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, caller())\r\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowance_ := sload(allowanceSlot)\r\n            // If the allowance is not the maximum uint256 value.\r\n            if iszero(eq(allowance_, not(0))) {\r\n                // Revert if the amount to be transferred exceeds the allowance.\r\n                if gt(amount, allowance_) {\r\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Subtract and store the updated allowance.\r\n                sstore(allowanceSlot, sub(allowance_, amount))\r\n            }\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalanceSlotValue := sload(fromBalanceSlot)\r\n            let fromBalance := and(fromBalanceSlotValue, _BALANCE_MASK)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, or(and(fromBalanceSlotValue, not(_BALANCE_MASK)), sub(fromBalance, amount)))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            let toBalanceSlotValue := sload(toBalanceSlot)\r\n            let toBalanceBefore := and(toBalanceSlotValue, _BALANCE_MASK)\r\n            let toBalanceAfter := add(toBalanceBefore, amount)\r\n            if gt(toBalanceAfter, _BALANCE_MASK) {\r\n                mstore(0x00, 0x89560ca1)\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Add and store the updated balance.\r\n            sstore(toBalanceSlot, or(and(toBalanceSlotValue, not(_BALANCE_MASK)), toBalanceAfter))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          EIP-2612                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Returns the current nonce for `owner`.\r\n    /// This value is used to compute the signature for EIP-2612 permit.\r\n    function nonces(address owner) public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the nonce slot and load its value.\r\n            mstore(0x0c, _NONCES_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `value` as the allowance of `spender` over the tokens of `owner`,\r\n    /// authorized by a signed approval by `owner`.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        bytes32 domainSeparator = DOMAIN_SEPARATOR();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Grab the free memory pointer.\r\n            let m := mload(0x40)\r\n            // Revert if the block timestamp greater than `deadline`.\r\n            if gt(timestamp(), deadline) {\r\n                mstore(0x00, 0x1a15a3cc) // `PermitExpired()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Clean the upper 96 bits.\r\n            owner := shr(96, shl(96, owner))\r\n            spender := shr(96, shl(96, spender))\r\n            // Compute the nonce slot and load its value.\r\n            mstore(0x0c, _NONCES_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            let nonceSlot := keccak256(0x0c, 0x20)\r\n            let nonceValue := sload(nonceSlot)\r\n            // Increment and store the updated nonce.\r\n            sstore(nonceSlot, add(nonceValue, 1))\r\n            // Prepare the inner hash.\r\n            // `keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")`.\r\n            // forgefmt: disable-next-item\r\n            mstore(m, 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9)\r\n            mstore(add(m, 0x20), owner)\r\n            mstore(add(m, 0x40), spender)\r\n            mstore(add(m, 0x60), value)\r\n            mstore(add(m, 0x80), nonceValue)\r\n            mstore(add(m, 0xa0), deadline)\r\n            // Prepare the outer hash.\r\n            mstore(0, 0x1901)\r\n            mstore(0x20, domainSeparator)\r\n            mstore(0x40, keccak256(m, 0xc0))\r\n            // Prepare the ecrecover calldata.\r\n            mstore(0, keccak256(0x1e, 0x42))\r\n            mstore(0x20, and(0xff, v))\r\n            mstore(0x40, r)\r\n            mstore(0x60, s)\r\n            pop(staticcall(gas(), 1, 0, 0x80, 0x20, 0x20))\r\n            // If the ecrecover fails, the returndatasize will be 0x00,\r\n            // `owner` will be be checked if it equals the hash at 0x00,\r\n            // which evaluates to false (i.e. 0), and we will revert.\r\n            // If the ecrecover succeeds, the returndatasize will be 0x20,\r\n            // `owner` will be compared against the returned address at 0x20.\r\n            if iszero(eq(mload(returndatasize()), owner)) {\r\n                mstore(0x00, 0xddafbaef) // `InvalidPermit()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Compute the allowance slot and store the value.\r\n            // The `owner` is already at slot 0x20.\r\n            mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender))\r\n            sstore(keccak256(0x2c, 0x34), value)\r\n            // Emit the {Approval} event.\r\n            log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender)\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            mstore(0x60, 0) // Restore the zero pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the EIP-2612 domains separator.\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(0x40) // Grab the free memory pointer.\r\n        }\r\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\r\n        bytes32 nameHash = keccak256(bytes(name()));\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := result\r\n            // `keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")`.\r\n            // forgefmt: disable-next-item\r\n            mstore(m, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\r\n            mstore(add(m, 0x20), nameHash)\r\n            // `keccak256(\"1\")`.\r\n            // forgefmt: disable-next-item\r\n            mstore(add(m, 0x40), 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6)\r\n            mstore(add(m, 0x60), chainid())\r\n            mstore(add(m, 0x80), address())\r\n            result := keccak256(m, 0xa0)\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                  INTERNAL MINT FUNCTIONS                   */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(address(0), to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let totalMintedBefore := sload(_TOTAL_MINTED_SLOT)\r\n            let totalMintedAfter := add(totalMintedBefore, amount)\r\n            // Revert if the total minted overflows.\r\n            if lt(totalMintedAfter, totalMintedBefore) {\r\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Store the updated total minted.\r\n            sstore(_TOTAL_MINTED_SLOT, totalMintedAfter)\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            let toBalanceSlotValue := sload(toBalanceSlot)\r\n            let toBalanceBefore := and(toBalanceSlotValue, _BALANCE_MASK)\r\n            let toMintedBefore := shr(128, toBalanceSlotValue)\r\n            let toBalanceAfter := add(toBalanceBefore, amount)\r\n            let toMintedAfter := add(toMintedBefore, amount)\r\n            if gt(toBalanceAfter, _BALANCE_MASK) {\r\n                mstore(0x00, 0x89560ca1)\r\n                revert(0x1c, 0x04)\r\n            }\r\n            if gt(toMintedAfter, _BALANCE_MASK) {\r\n                mstore(0x00, 0x89560ca1)\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Add and store the updated balance.\r\n            sstore(toBalanceSlot, add(shl(128, toMintedAfter), toBalanceAfter))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(address(0), to, amount);\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                  INTERNAL BURN FUNCTIONS                   */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(from, address(0), amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, _BALANCE_SLOT_SEED)\r\n            mstore(0x00, from)\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalanceSlotValue := sload(fromBalanceSlot)\r\n            let fromBalance := and(fromBalanceSlotValue, _BALANCE_MASK)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, or(and(fromBalanceSlotValue, not(_BALANCE_MASK)), sub(fromBalance, amount)))\r\n            // Update burned\r\n            let totalBurnedBefore := sload(_TOTAL_BURNED_SLOT)\r\n            let totalBurnedAfter := add(totalBurnedBefore, amount)\r\n            // Revert if the total minted overflows.\r\n            if lt(totalBurnedAfter, totalBurnedBefore) {\r\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Store the updated total burned.\r\n            sstore(_TOTAL_BURNED_SLOT, totalBurnedAfter)\r\n            // Emit the {Transfer} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\r\n        }\r\n        _afterTokenTransfer(from, address(0), amount);\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Moves `amount` of tokens from `from` to `to`.\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(from, to, amount);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let from_ := shl(96, from)\r\n            // Compute the balance slot and load its value.\r\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\r\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\r\n            let fromBalanceSlotValue := sload(fromBalanceSlot)\r\n            let fromBalance := and(fromBalanceSlotValue, _BALANCE_MASK)\r\n            // Revert if insufficient balance.\r\n            if gt(amount, fromBalance) {\r\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Subtract and store the updated balance.\r\n            sstore(fromBalanceSlot, or(and(fromBalanceSlotValue, not(_BALANCE_MASK)), sub(fromBalance, amount)))\r\n            // Compute the balance slot of `to`.\r\n            mstore(0x00, to)\r\n            let toBalanceSlot := keccak256(0x0c, 0x20)\r\n            let toBalanceSlotValue := sload(toBalanceSlot)\r\n            let toBalanceBefore := and(toBalanceSlotValue, _BALANCE_MASK)\r\n            let toBalanceAfter := add(toBalanceBefore, amount)\r\n            if gt(toBalanceAfter, _BALANCE_MASK) {\r\n                mstore(0x00, 0x89560ca1)\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Add and store the updated balance.\r\n            sstore(toBalanceSlot, or(and(toBalanceSlotValue, not(_BALANCE_MASK)), toBalanceAfter))\r\n            // Emit the {Transfer} event.\r\n            mstore(0x20, amount)\r\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\r\n        }\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the allowance slot and load its value.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            let allowanceSlot := keccak256(0x0c, 0x34)\r\n            let allowance_ := sload(allowanceSlot)\r\n            // If the allowance is not the maximum uint256 value.\r\n            if iszero(eq(allowance_, not(0))) {\r\n                // Revert if the amount to be transferred exceeds the allowance.\r\n                if gt(amount, allowance_) {\r\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Subtract and store the updated allowance.\r\n                sstore(allowanceSlot, sub(allowance_, amount))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let owner_ := shl(96, owner)\r\n            // Compute the allowance slot and store the amount.\r\n            mstore(0x20, spender)\r\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\r\n            sstore(keccak256(0x0c, 0x34), amount)\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                     HOOKS TO OVERRIDE                      */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Hook that is called before any transfer of tokens.\r\n    /// This includes minting and burning.\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /// @dev Hook that is called after any transfer of tokens.\r\n    /// This includes minting and burning.\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}"
		},
		"contracts/tokens/ERC20/Layerr20.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./ERC20.sol\";\r\nimport {ILayerr20} from \"../../interfaces/ILayerr20.sol\";\r\nimport {ILayerrRenderer} from \"../../interfaces/ILayerrRenderer.sol\";\r\nimport {LayerrToken} from \"../LayerrToken.sol\";\r\n\r\n/**\r\n * @title Layerr20\r\n * @author 0xth0mas (Layerr)\r\n * @notice Layerr20 is an ERC20 contract built for the Layerr platform using\r\n *         the Solady ERC20 implementation.\r\n */\r\ncontract Layerr20 is ERC20, ILayerr20, LayerrToken {\r\n\r\n    /** METADATA FUNCTIONS */\r\n\r\n    /**\r\n     * @notice Returns the URI for the contract metadata\r\n     * @return contractURI location of the contract metadata\r\n     */\r\n    function contractURI() public view returns (string memory) {\r\n        return ILayerrRenderer(_getRenderer()).contractURI(address(this));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc LayerrToken\r\n     */\r\n    function name() public view virtual override(LayerrToken, ERC20) returns (string memory) {\r\n        return LayerrToken.name();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc LayerrToken\r\n     */\r\n    function symbol() public view virtual override(LayerrToken, ERC20) returns (string memory) {\r\n        return LayerrToken.symbol();\r\n    }\r\n\r\n    /** MINT FUNCTIONS */\r\n\r\n    /**\r\n     * @inheritdoc ILayerr20\r\n     */\r\n    function mint(address, address to, uint256 amount) external onlyMinter {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr20\r\n     */\r\n    function burn(address from, uint256 amount) external {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr20\r\n     */\r\n    function totalSupply() public view override(ERC20, ILayerr20) returns (uint256) {\r\n        return ERC20.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr20\r\n     */\r\n    function totalMintedTokenAndMinter(address minter) external view returns(uint256 totalMinted, uint256 minterMinted) {\r\n        totalMinted = _totalMinted();\r\n        minterMinted = _numberMinted(minter);\r\n    }\r\n\r\n    /** OWNER FUNCTIONS */\r\n\r\n    /**\r\n     * @inheritdoc ILayerr20\r\n     */\r\n    function airdrop(address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {\r\n        if(recipients.length != amounts.length) { revert ArrayLengthMismatch(); }\r\n\r\n        for(uint256 index = 0;index < recipients.length;) {\r\n            uint256 amount = amounts[index];\r\n            _mint(recipients[index], amount);\r\n            unchecked { ++index; }\r\n        }\r\n    }\r\n\r\n    /** ERC165 */\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override(LayerrToken) returns (bool) {\r\n        return\r\n            interfaceId == type(ILayerr20).interfaceId ||\r\n            LayerrToken.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
		},
		"contracts/tokens/LayerrToken.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\nimport {AddressValue, StringValue} from \"../lib/StorageTypes.sol\";\r\nimport {LAYERRTOKEN_NAME_SLOT, LAYERRTOKEN_SYMBOL_SLOT, LAYERRTOKEN_RENDERER_SLOT} from \"../common/LayerrStorage.sol\";\r\nimport {LayerrOwnable} from \"../common/LayerrOwnable.sol\";\r\nimport {ILayerrToken} from \"../interfaces/ILayerrToken.sol\";\r\nimport {ILayerrMinter} from \"../interfaces/ILayerrMinter.sol\";\r\nimport {ERC2981} from \"../lib/ERC2981.sol\";\r\n\r\n/**\r\n * @title LayerrToken\r\n * @author 0xth0mas (Layerr)\r\n * @notice LayerrToken contains the general purpose token contract functions for interacting\r\n *         with the Layerr platform.\r\n */\r\ncontract LayerrToken is ILayerrToken, LayerrOwnable, ERC2981 {\r\n\r\n    /// @dev mapping of allowed mint extensions\r\n    mapping(address => bool) public mintingExtensions;\r\n\r\n    modifier onlyMinter() {\r\n        if (!mintingExtensions[msg.sender]) {\r\n            revert NotValidMintingExtension();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function name() public virtual view returns(string memory _name) {\r\n        StringValue storage nameValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            nameValue.slot := LAYERRTOKEN_NAME_SLOT\r\n        }\r\n        _name = nameValue.value;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function symbol() public virtual view returns(string memory _symbol) {\r\n        StringValue storage symbolValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            symbolValue.slot := LAYERRTOKEN_SYMBOL_SLOT\r\n        }\r\n        _symbol = symbolValue.value;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function renderer() external view returns(address _renderer) {\r\n        _renderer = _getRenderer();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(LayerrOwnable, ERC2981) returns (bool) {\r\n        return interfaceId == type(ILayerrToken).interfaceId ||\r\n            ERC2981.supportsInterface(interfaceId) ||\r\n            LayerrOwnable.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /* OWNER FUNCTIONS */\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setRenderer(address _renderer) external onlyOwner {\r\n        _setRenderer(_renderer);\r\n\r\n        emit RendererUpdated(_renderer);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setMintExtension(\r\n        address _extension,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        mintingExtensions[_extension] = _allowed;\r\n\r\n        emit MintExtensionUpdated(_extension, _allowed);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setContractAllowedSigner(\r\n        address _extension,\r\n        address _signer,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        ILayerrMinter(_extension).setContractAllowedSigner(_signer, _allowed);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setContractAllowedOracle(\r\n        address _extension,\r\n        address _oracle,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        ILayerrMinter(_extension).setContractAllowedOracle(_oracle, _allowed);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setSignatureValidity(\r\n        address _extension,\r\n        bytes32[] calldata signatureDigests,\r\n        bool invalid\r\n    ) external onlyOwner {\r\n        ILayerrMinter(_extension).setSignatureValidity(signatureDigests, invalid);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setRoyalty(\r\n        uint96 pct,\r\n        address royaltyReciever\r\n    ) external onlyOwner {\r\n        _setDefaultRoyalty(royaltyReciever, pct);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function editContract(\r\n        string calldata _name,\r\n        string calldata _symbol\r\n    ) external onlyOwner {\r\n        _setName(_name);\r\n        _setSymbol(_symbol);\r\n    }\r\n\r\n    /**\r\n     * @notice Called during a proxy deployment to emit the LayerrContractDeployed event\r\n     */\r\n    function initialize() external onlyOwner {\r\n        emit LayerrContractDeployed();\r\n    }\r\n\r\n    /**\r\n     * @notice Called to withdraw any funds that may be sent to the contract\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        (bool sent, ) = payable(_getOwner()).call{value: address(this).balance}(\"\");\r\n        if (!sent) {\r\n            revert WithdrawFailed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  INTERNAL FUNCTIONS\r\n     */\r\n\r\n    /**\r\n     * @notice Internal function to set the renderer address in a custom storage slot location\r\n     * @param _renderer address of the renderer to set\r\n     */\r\n    function _setRenderer(address _renderer) internal {\r\n        AddressValue storage rendererValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            rendererValue.slot := LAYERRTOKEN_RENDERER_SLOT\r\n        }\r\n        rendererValue.value = _renderer;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to get the renderer address from a custom storage slot location\r\n     * @return _renderer address of the renderer\r\n     */\r\n    function _getRenderer() internal view returns(address _renderer) {\r\n        AddressValue storage rendererValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            rendererValue.slot := LAYERRTOKEN_RENDERER_SLOT\r\n        }\r\n        _renderer = rendererValue.value;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to set the token contract name in a custom storage slot location\r\n     * @param _name name for the token contract\r\n     */\r\n    function _setName(string calldata _name) internal {\r\n        StringValue storage nameValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            nameValue.slot := LAYERRTOKEN_NAME_SLOT\r\n        }\r\n        nameValue.value = _name;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to set the token contract symbol in a custom storage slot location\r\n     * @param _symbol symbol for the token contract\r\n     */\r\n    function _setSymbol(string calldata _symbol) internal {\r\n        StringValue storage symbolValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            symbolValue.slot := LAYERRTOKEN_SYMBOL_SLOT\r\n        }\r\n        symbolValue.value = _symbol;\r\n    }\r\n}"
		},
	},
	"settings": {
		"optimizer": {
			"enabled": true,
			"runs": 33333
		},
		"evmVersion": "paris",
		"viaIR": true,
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"evm.bytecode",
					"evm.deployedBytecode",
					"evm.methodIdentifiers",
					"metadata"
				],
				"": [
					"ast"
				]
			}
		}
	}
}