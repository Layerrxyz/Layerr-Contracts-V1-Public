{
	"language": "Solidity",
	"sources": {
		"contracts/common/LayerrOwnable.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\nimport {AddressValue} from \"../lib/StorageTypes.sol\";\r\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\r\nimport {LAYERROWNABLE_OWNER_SLOT, LAYERROWNABLE_NEW_OWNER_SLOT} from \"./LayerrStorage.sol\";\r\n\r\n/**\r\n * @title LayerrOwnable\r\n * @author 0xth0mas (Layerr)\r\n * @notice ERC173 compliant ownership interface with two-step transfer/acceptance.\r\n * @dev LayerrOwnable uses two custom storage slots for current contract owner and new owner as defined in LayerrStorage.\r\n */\r\ncontract LayerrOwnable is IOwnable {\r\n    modifier onlyOwner() {\r\n        if (msg.sender != _getOwner()) {\r\n            revert NotContractOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyNewOwner() {\r\n        if (msg.sender != _getNewOwner()) {\r\n            revert NotContractOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current contract owner\r\n     */\r\n    function owner() external view returns(address _owner) {\r\n        _owner = _getOwner();\r\n    }\r\n\r\n    /**\r\n     * @notice Begins first step of ownership transfer. _newOwner will need to call acceptTransfer() to complete.\r\n     * @param _newOwner address to transfer ownership of contract to\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        _setNewOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Second step of ownership transfer called by the new contract owner.\r\n     */\r\n    function acceptTransfer() external onlyNewOwner {\r\n        address _previousOwner = _getOwner();\r\n\r\n        //set contract owner to new owner, clear out the newOwner value\r\n        _setOwner(_getNewOwner());\r\n        _setNewOwner(address(0));\r\n\r\n        emit OwnershipTransferred(_previousOwner, _getOwner());\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels ownership transfer to newOwner before the transfer is accepted.\r\n     */\r\n    function cancelTransfer() external onlyOwner {\r\n        _setNewOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice EIP165 supportsInterface for introspection\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\r\n        return interfaceID == 0x7f5828d0;\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n\r\n    /**\r\n     * @dev Internal helper function to load custom storage slot address value\r\n     */\r\n    function _getOwner() internal view returns(address _owner) {\r\n        AddressValue storage ownerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            ownerValue.slot := LAYERROWNABLE_OWNER_SLOT\r\n        }\r\n        _owner = ownerValue.value;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal helper function to set owner address in custom storage slot\r\n     */\r\n    function _setOwner(address _owner) internal {\r\n        AddressValue storage ownerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            ownerValue.slot := LAYERROWNABLE_OWNER_SLOT\r\n        }\r\n        ownerValue.value = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal helper function to load custom storage slot address value\r\n     */\r\n    function _getNewOwner() internal view returns(address _newOwner) {\r\n        AddressValue storage newOwnerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            newOwnerValue.slot := LAYERROWNABLE_NEW_OWNER_SLOT\r\n        }\r\n        _newOwner = newOwnerValue.value;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal helper function to set new owner address in custom storage slot\r\n     */\r\n    function _setNewOwner(address _newOwner) internal {\r\n        AddressValue storage newOwnerValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            newOwnerValue.slot := LAYERROWNABLE_NEW_OWNER_SLOT\r\n        }\r\n        newOwnerValue.value = _newOwner;\r\n    }\r\n\r\n}"
		},
		"contracts/common/LayerrStorage.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\n/// @dev Storage slot for current owner calculated from keccak256('Layerr.LayerrOwnable.owner')\r\nbytes32 constant LAYERROWNABLE_OWNER_SLOT = 0xedc628ad38a73ae7d50600532f1bf21da1bfb1390b4f8174f361aca54d4c6b66;\r\n\r\n/// @dev Storage slot for pending ownership transfer calculated from keccak256('Layerr.LayerrOwnable.newOwner')\r\nbytes32 constant LAYERROWNABLE_NEW_OWNER_SLOT = 0x15c115ab76de082272ae65126522082d4aad634b6478097549f84086af3b84bc;\r\n\r\n/// @dev Storage slot for token name calculated from keccak256('Layerr.LayerrToken.name')\r\nbytes32 constant LAYERRTOKEN_NAME_SLOT = 0x7f84c61ed30727f282b62cab23f49ac7f4d263f04a4948416b7b9ba7f34a20dc;\r\n\r\n/// @dev Storage slot for token symbol calculated from keccak256('Layerr.LayerrToken.symbol')\r\nbytes32 constant LAYERRTOKEN_SYMBOL_SLOT = 0xdc0f2363b26c589c72caecd2357dae5fee235863060295a057e8d69d61a96d8a;\r\n\r\n/// @dev Storage slot for URI renderer calculated from keccak256('Layerr.LayerrToken.renderer')\r\nbytes32 constant LAYERRTOKEN_RENDERER_SLOT = 0x395b7021d979c3dbed0f5d530785632316942232113ba3dbe325dc167550e320;"
		},
		"contracts/interfaces/IERC165.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. \r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}"
		},
		"contracts/interfaces/IERC4906.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC4906 {\r\n    /// @dev This event emits when the metadata of a token is changed.\r\n    /// So that the third-party platforms such as NFT market could\r\n    /// timely update the images and related attributes of the NFT.\r\n    event MetadataUpdate(uint256 _tokenId);\r\n\r\n    /// @dev This event emits when the metadata of a range of tokens is changed.\r\n    /// So that the third-party platforms such as NFT market could\r\n    /// timely update the images and related attributes of the NFTs.    \r\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);   \r\n}"
		},
		"contracts/interfaces/ILayerr721A.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ILayerr721A\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerr721A interface defines functions required in an ERC721A token contract to callable by the LayerrMinter contract.\r\n * @dev ILayerr721A should be used for sequential token minting.\r\n */\r\ninterface ILayerr721A {\r\n    /// @dev Thrown when two or more sets of arrays are supplied that require equal lengths but differ in length.\r\n    error ArrayLengthMismatch();\r\n\r\n\r\n    /**\r\n     * @notice Mints tokens to the recipients, each recipient receives the corresponding amount of tokens in the `amounts` array\r\n     * @dev This function should be protected by a role so that it is not callable by any address\r\n     * @param recipients addresses to airdrop tokens to\r\n     * @param amounts amount of tokens that should be airdropped to each recipient\r\n     */\r\n    function airdrop(address[] calldata recipients, uint256[] calldata amounts) external;\r\n\r\n\r\n    /**\r\n     * @notice Sequentially mints `quantity` of tokens to `to`\r\n     * @dev `minter` and `to` may be the same address but are passed as two separate parameters to properly account for\r\n     *      allowlist mints where a minter is using a delegated wallet to mint\r\n     * @param minter address that the mint count will be credited to\r\n     * @param to address that will receive the tokens\r\n     * @param quantity the number of tokens to sequentially mint to `to`\r\n     */\r\n    function mintSequential(address minter, address to, uint256 quantity) external;\r\n\r\n    /**\r\n     * @notice Burns `tokenId` from `from` address\r\n     * @dev This function should check that the caller has permission to burn tokens on behalf of `from`\r\n     * @param from address to burn the tokenId from\r\n     * @param tokenId id of token to be burned\r\n     */\r\n    function burnTokenId(address from, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @notice Burns `tokenIds` from `from` address\r\n     * @dev This function should check that the caller has permission to burn tokens on behalf of `from`\r\n     * @param from address to burn the tokenIds from\r\n     * @param tokenIds ids of tokens to be burned\r\n     */\r\n    function burnBatchTokenIds(\r\n        address from,\r\n        uint256[] calldata tokenIds\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Emits ERC-4906 BatchMetadataUpdate event for all tokens\r\n     */\r\n    function updateMetadataAllTokens() external;\r\n\r\n    /**\r\n     * @notice Emits ERC-4906 MetadataUpdate event for tokens provided\r\n     * @param tokenIds array of token ids to emit MetadataUpdate event for\r\n     */\r\n    function updateMetadataSpecificTokens(uint256[] calldata tokenIds) external;\r\n\r\n    /**\r\n     * @notice Returns the total supply of ERC721 tokens in circulation.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the total number of tokens minted for the contract and the number of tokens minted by the `minter`\r\n     * @param minter address to check for number of tokens minted\r\n     * @return totalMinted total number of ERC721 tokens minted since token launch\r\n     * @return minterMinted total number of ERC721 tokens minted by the `minter`\r\n     */\r\n    function totalMintedCollectionAndMinter(address minter) external view returns(uint256 totalMinted, uint256 minterMinted);\r\n}"
		},
		"contracts/interfaces/ILayerrMinter.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {MintOrder, MintParameters, MintToken, BurnToken, PaymentToken} from \"../lib/MinterStructs.sol\";\r\n\r\n/**\r\n * @title ILayerrMinter\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerrMinter interface defines functions required in the LayerrMinter to be callable by token contracts\r\n */\r\ninterface ILayerrMinter {\r\n\r\n    /// @dev Event emitted when a mint order is fulfilled\r\n    event MintOrderFulfilled(\r\n        bytes32 indexed mintParametersDigest,\r\n        address indexed minter,\r\n        uint256 indexed quantity\r\n    );\r\n\r\n    /// @dev Event emitted when a token contract updates an allowed signer for EIP712 signatures\r\n    event ContractAllowedSignerUpdate(\r\n        address indexed _contract,\r\n        address indexed _signer,\r\n        bool indexed _allowed\r\n    );\r\n\r\n    /// @dev Event emitted when a token contract updates an allowed oracle signer for offchain authorization of a wallet to use a signature\r\n    event ContractOracleUpdated(\r\n        address indexed _contract,\r\n        address indexed _oracle,\r\n        bool indexed _allowed\r\n    );\r\n\r\n    /// @dev Event emitted when a signer updates their nonce with LayerrMinter. Updating a nonce invalidates all previously signed EIP712 signatures.\r\n    event SignerNonceIncremented(\r\n        address indexed _signer,\r\n        uint256 indexed _nonce\r\n    );\r\n\r\n    /// @dev Event emitted when a specific signature's validity is updated with the LayerrMinter contract.\r\n    event SignatureValidityUpdated(\r\n        address indexed _contract,\r\n        bool indexed invalid,\r\n        bytes32 mintParametersDigests\r\n    );\r\n\r\n    /// @dev Thrown when the amount of native tokens supplied in msg.value is insufficient for the mint order\r\n    error InsufficientPayment();\r\n\r\n    /// @dev Thrown when a payment fails to be forwarded to the intended recipient\r\n    error PaymentFailed();\r\n\r\n    /// @dev Thrown when a MintParameters payment token uses a token type value other than native or ERC20\r\n    error InvalidPaymentTokenType();\r\n\r\n    /// @dev Thrown when a MintParameters burn token uses a token type value other than ERC20, ERC721 or ERC1155\r\n    error InvalidBurnTokenType();\r\n\r\n    /// @dev Thrown when a MintParameters mint token uses a token type value other than ERC20, ERC721 or ERC1155\r\n    error InvalidMintTokenType();\r\n\r\n    /// @dev Thrown when a MintParameters burn token uses a burn type value other than contract burn or send to dead\r\n    error InvalidBurnType();\r\n\r\n    /// @dev Thrown when a MintParameters burn token requires a specific burn token id and the tokenId supplied does not match\r\n    error InvalidBurnTokenId();\r\n\r\n    /// @dev Thrown when a MintParameters burn token requires a specific ERC721 token and the burn amount is greater than 1\r\n    error CannotBurnMultipleERC721WithSameId();\r\n\r\n    /// @dev Thrown when attempting to mint with MintParameters that have a start time greater than the current block time\r\n    error MintHasNotStarted();\r\n\r\n    /// @dev Thrown when attempting to mint with MintParameters that have an end time less than the current block time\r\n    error MintHasEnded();\r\n\r\n    /// @dev Thrown when a MintParameters has a merkleroot set but the supplied merkle proof is invalid\r\n    error InvalidMerkleProof();\r\n\r\n    /// @dev Thrown when a MintOrder will cause a token's minted supply to exceed the defined maximum supply in MintParameters\r\n    error MintExceedsMaxSupply();\r\n\r\n    /// @dev Thrown when a MintOrder will cause a minter's minted amount to exceed the defined max per wallet in MintParameters\r\n    error MintExceedsMaxPerWallet();\r\n\r\n    /// @dev Thrown when a MintParameters mint token has a specific ERC721 token and the mint amount is greater than 1\r\n    error CannotMintMultipleERC721WithSameId();\r\n\r\n    /// @dev Thrown when the recovered signer for the MintParameters is not an allowed signer for the mint token\r\n    error NotAllowedSigner();\r\n\r\n    /// @dev Thrown when the recovered signer's nonce does not match the current nonce in LayerrMinter\r\n    error SignerNonceInvalid();\r\n\r\n    /// @dev Thrown when a signature has been marked as invalid for a mint token contract\r\n    error SignatureInvalid();\r\n\r\n    /// @dev Thrown when MintParameters requires an oracle signature and the recovered signer is not an allowed oracle for the contract\r\n    error InvalidOracleSignature();\r\n\r\n    /// @dev Thrown when MintParameters has a max signature use set and the MintOrder will exceed the maximum uses\r\n    error ExceedsMaxSignatureUsage();\r\n\r\n    /// @dev Thrown when attempting to increment nonce on behalf of another account and the signature is invalid\r\n    error InvalidSignatureToIncrementNonce();\r\n\r\n    /**\r\n     * @notice This function is called by token contracts to update allowed signers for minting\r\n     * @param _signer address of the EIP712 signer\r\n     * @param _allowed if the `_signer` is allowed to sign for minting\r\n     */\r\n    function setContractAllowedSigner(address _signer, bool _allowed) external;\r\n\r\n    /**\r\n     * @notice This function is called by token contracts to update allowed oracles for offchain authorizations\r\n     * @param _oracle address of the oracle\r\n     * @param _allowed if the `_oracle` is allowed to sign offchain authorizations\r\n     */\r\n    function setContractAllowedOracle(address _oracle, bool _allowed) external;\r\n\r\n    /**\r\n     * @notice This function is called by token contracts to update validity of signatures for the LayerrMinter contract\r\n     * @dev `invalid` should be true to invalidate signatures, the default state of `invalid` being false means \r\n     *      a signature is valid for a contract assuming all other conditions are met\r\n     * @param mintParametersDigests an array of message digests for MintParameters to update validity of\r\n     * @param invalid if the supplied digests will be marked as valid or invalid\r\n     */\r\n    function setSignatureValidity(\r\n        bytes32[] calldata mintParametersDigests,\r\n        bool invalid\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Increments the nonce for a signer to invalidate all previous signed MintParameters\r\n     */\r\n    function incrementSignerNonce() external;\r\n\r\n    /**\r\n     * @notice Increments the nonce on behalf of another account by validating a signature from that account\r\n     * @dev The signature is an eth personal sign message of the current signer nonce plus the chain id\r\n     *      ex. current nonce 0 on chain 5 would be a signature of \\x19Ethereum Signed Message:\\n15\r\n     *          current nonce 50 on chain 1 would be a signature of \\x19Ethereum Signed Message:\\n251\r\n     * @param signer account to increment nonce for\r\n     * @param signature signature proof that the request is coming from the account\r\n     */\r\n    function incrementNonceFor(address signer, bytes calldata signature) external;\r\n\r\n    /**\r\n     * @notice Validates and processes a single MintOrder, tokens are minted to msg.sender\r\n     * @param mintOrder struct containing the details of the mint order\r\n     */\r\n    function mint(\r\n        MintOrder calldata mintOrder\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Validates and processes an array of MintOrders, tokens are minted to msg.sender\r\n     * @param mintOrders array of structs containing the details of the mint orders\r\n     */\r\n    function mintBatch(\r\n        MintOrder[] calldata mintOrders\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Validates and processes a single MintOrder, tokens are minted to `mintToWallet`\r\n     * @param mintToWallet the address tokens will be minted to\r\n     * @param mintOrder struct containing the details of the mint order\r\n     * @param paymentContext Contextual information related to the payment process\r\n     *                     (Note: This parameter is required for integration with \r\n     *                     the payment processor and does not impact the behavior \r\n     *                     of the function)\r\n     */\r\n    function mintTo(\r\n        address mintToWallet,\r\n        MintOrder calldata mintOrder,\r\n        uint256 paymentContext\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Validates and processes an array of MintOrders, tokens are minted to `mintToWallet`\r\n     * @param mintToWallet the address tokens will be minted to\r\n     * @param mintOrders array of structs containing the details of the mint orders\r\n     * @param paymentContext Contextual information related to the payment process\r\n     *                     (Note: This parameter is required for integration with \r\n     *                     the payment processor and does not impact the behavior \r\n     *                     of the function)\r\n     */\r\n    function mintBatchTo(\r\n        address mintToWallet,\r\n        MintOrder[] calldata mintOrders,\r\n        uint256 paymentContext\r\n    ) external payable;\r\n}"
		},
		"contracts/interfaces/ILayerrRenderer.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {ERC165} from \"./IERC165.sol\";\r\n\r\n/**\r\n * @title ILayerrRenderer\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerrRenderer interface defines functions required in LayerrRenderer to be callable by token contracts\r\n */\r\ninterface ILayerrRenderer is ERC165 {\r\n\r\n    enum RenderType {\r\n        LAYERR_HOSTED,\r\n        PREREVEAL,\r\n        BASE_PLUS_TOKEN\r\n    }\r\n\r\n    /// @dev Thrown when a payment fails for Layerr-hosted IPFS\r\n    error PaymentFailed();\r\n\r\n    /// @dev Thrown when a call is made for an owner-function by a non-contract owner\r\n    error NotContractOwner();\r\n\r\n    /// @dev Thrown when a signature is not made by the authorized account\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @notice Generates a tokenURI for the `contractAddress` and `tokenId`\r\n     * @param contractAddress token contract address to render a token URI for\r\n     * @param tokenId token id to render\r\n     * @return uri for the token metadata\r\n     */\r\n    function tokenURI(\r\n        address contractAddress,\r\n        uint256 tokenId\r\n    ) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Generates a contractURI for the `contractAddress`\r\n     * @param contractAddress contract address to render a contract URI for\r\n     * @return uri for the contract metadata\r\n     */\r\n    function contractURI(\r\n        address contractAddress\r\n    ) external view returns (string memory);\r\n}\r\n"
		},
		"contracts/interfaces/ILayerrToken.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ILayerrToken\r\n * @author 0xth0mas (Layerr)\r\n * @notice ILayerrToken interface defines functions required to be supported by the Layerr platform\r\n */\r\ninterface ILayerrToken {\r\n\r\n    /// @dev Emitted when the contract is deployed so that it can be indexed and assigned to its owner\r\n    event LayerrContractDeployed();\r\n\r\n    /// @dev Emitted when a mint extension is updated to allowed or disallowed\r\n    event MintExtensionUpdated(address mintExtension, bool allowed);\r\n\r\n    /// @dev Emitted when the contract's renderer is updated\r\n    event RendererUpdated(address renderer);\r\n\r\n    /// @dev Thrown when a caller that is not a mint extension attempts to execute a mint function\r\n    error NotValidMintingExtension();\r\n\r\n    /// @dev Thrown when a non-owner attempts to execute an only owner function\r\n    error NotAuthorized();\r\n\r\n    /// @dev Thrown when attempting to withdraw funds from the contract and the call fails\r\n    error WithdrawFailed();\r\n\r\n    /**\r\n     * @return name the name of the token\r\n     */\r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @return symbol the token symbol\r\n     */\r\n    function symbol() external view returns(string memory);\r\n\r\n    /**\r\n     * @return renderer the address that will render token/contract URIs\r\n     */\r\n    function renderer() external view returns(address);\r\n    \r\n    /**\r\n     * @notice Sets the renderer for token/contract URIs\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _renderer address to set as the token/contract URI renderer\r\n     */\r\n    function setRenderer(address _renderer) external;\r\n\r\n    /**\r\n     * @notice Sets whether or not an address is allowed to call minting functions\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param _allowed if the mint extension is allowed to mint tokens\r\n     */\r\n    function setMintExtension(\r\n        address _extension,\r\n        bool _allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function calls the mint extension to update `_signer`'s allowance\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param _signer address of the signer to update\r\n     * @param _allowed if `_signer` is allowed to sign for `_extension`\r\n     */\r\n    function setContractAllowedSigner(\r\n        address _extension,\r\n        address _signer,\r\n        bool _allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function calls the mint extension to update `_oracle`'s allowance\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param _oracle address of the oracle to update\r\n     * @param _allowed if `_oracle` is allowed to sign for `_extension`\r\n     */\r\n    function setContractAllowedOracle(\r\n        address _extension,\r\n        address _oracle,\r\n        bool _allowed\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function calls the mint extension to update signature validity\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _extension address of the mint extension to update\r\n     * @param signatureDigests hash digests of signatures parameters to update\r\n     * @param invalid true if the signature digests should be marked as invalid\r\n     */\r\n    function setSignatureValidity(\r\n        address _extension,\r\n        bytes32[] calldata signatureDigests,\r\n        bool invalid\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function updates the ERC2981 royalty percentages\r\n     * @dev This function should be restricted to contract owners\r\n     * @param pct royalty percentage in BPS\r\n     * @param royaltyReciever address to receive royalties\r\n     */\r\n    function setRoyalty(\r\n        uint96 pct,\r\n        address royaltyReciever\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function updates the token contract's name and symbol\r\n     * @dev This function should be restricted to contract owners\r\n     * @param _name new name for the token contract\r\n     * @param _symbol new symbol for the token contract\r\n     */\r\n    function editContract(\r\n        string calldata _name,\r\n        string calldata _symbol\r\n    ) external;\r\n}"
		},
		"contracts/interfaces/IOwnable.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {ERC165} from './IERC165.sol';\r\n\r\ninterface IOwnable is ERC165 {\r\n\r\n    /// @dev Thrown when a non-owner is attempting to perform an owner function\r\n    error NotContractOwner();\r\n\r\n    /// @dev Emitted when contract ownership is transferred to a new owner\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner    \r\n    /// @return The address of the owner.\r\n    function owner() view external returns(address);\r\n\t\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\r\n    /// @param _newOwner The address of the new owner of the contract    \r\n    function transferOwnership(address _newOwner) external;\t\r\n}\r\n"
		},
		"contracts/lib/ERC2981.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Simple ERC2981 NFT Royalty Standard implementation.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC2981.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/common/ERC2981.sol)\r\nabstract contract ERC2981 {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The royalty fee numerator exceeds the fee denominator.\r\n    error RoyaltyOverflow();\r\n\r\n    /// @dev The royalty receiver cannot be the zero address.\r\n    error RoyaltyReceiverIsZeroAddress();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The default royalty info is given by:\r\n    /// ```\r\n    ///     let packed := sload(_ERC2981_MASTER_SLOT_SEED)\r\n    ///     let receiver := shr(96, packed)\r\n    ///     let royaltyFraction := xor(packed, shl(96, receiver))\r\n    /// ```\r\n    ///\r\n    /// The per token royalty info is given by.\r\n    /// ```\r\n    ///     mstore(0x00, tokenId)\r\n    ///     mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n    ///     let packed := sload(keccak256(0x00, 0x40))\r\n    ///     let receiver := shr(96, packed)\r\n    ///     let royaltyFraction := xor(packed, shl(96, receiver))\r\n    /// ```\r\n    uint256 private constant _ERC2981_MASTER_SLOT_SEED = 0xaa4ec00224afccfdb7;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          ERC2981                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Checks that `_feeDenominator` is non-zero.\r\n    constructor() {\r\n        require(_feeDenominator() != 0, \"Fee denominator cannot be zero.\");\r\n    }\r\n\r\n    /// @dev Returns the denominator for the royalty amount.\r\n    /// Defaults to 10000, which represents fees in basis points.\r\n    /// Override this function to return a custom amount if needed.\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n\r\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-165\r\n    /// This function call must use less than 30000 gas.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let s := shr(224, interfaceId)\r\n            // ERC165: 0x01ffc9a7, ERC2981: 0x2a55205a.\r\n            result := or(eq(s, 0x01ffc9a7), eq(s, 0x2a55205a))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the `receiver` and `royaltyAmount` for `tokenId` sold at `salePrice`.\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        uint256 feeDenominator = _feeDenominator();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n            let packed := sload(keccak256(0x00, 0x40))\r\n            receiver := shr(96, packed)\r\n            if iszero(receiver) {\r\n                packed := sload(mload(0x20))\r\n                receiver := shr(96, packed)\r\n            }\r\n            let x := salePrice\r\n            let y := xor(packed, shl(96, receiver)) // `feeNumerator`.\r\n            // Overflow check, equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\r\n            // Out-of-gas revert. Should not be triggered in practice, but included for safety.\r\n            returndatacopy(returndatasize(), returndatasize(), mul(y, gt(x, div(not(0), y))))\r\n            royaltyAmount := div(mul(x, y), feeDenominator)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the default royalty `receiver` and `feeNumerator`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `receiver` must not be the zero address.\r\n    /// - `feeNumerator` must not be greater than the fee denominator.\r\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\r\n        uint256 feeDenominator = _feeDenominator();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            feeNumerator := shr(160, shl(160, feeNumerator))\r\n            if gt(feeNumerator, feeDenominator) {\r\n                mstore(0x00, 0x350a88b3) // `RoyaltyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            let packed := shl(96, receiver)\r\n            if iszero(packed) {\r\n                mstore(0x00, 0xb4457eaa) // `RoyaltyReceiverIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            sstore(_ERC2981_MASTER_SLOT_SEED, or(packed, feeNumerator))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the default royalty `receiver` and `feeNumerator` to zero.\r\n    function _deleteDefaultRoyalty() internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            sstore(_ERC2981_MASTER_SLOT_SEED, 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the royalty `receiver` and `feeNumerator` for `tokenId`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `receiver` must not be the zero address.\r\n    /// - `feeNumerator` must not be greater than the fee denominator.\r\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator)\r\n        internal\r\n        virtual\r\n    {\r\n        uint256 feeDenominator = _feeDenominator();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            feeNumerator := shr(160, shl(160, feeNumerator))\r\n            if gt(feeNumerator, feeDenominator) {\r\n                mstore(0x00, 0x350a88b3) // `RoyaltyOverflow()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            let packed := shl(96, receiver)\r\n            if iszero(packed) {\r\n                mstore(0x00, 0xb4457eaa) // `RoyaltyReceiverIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n            sstore(keccak256(0x00, 0x40), or(packed, feeNumerator))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the royalty `receiver` and `feeNumerator` for `tokenId` to zero.\r\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, _ERC2981_MASTER_SLOT_SEED)\r\n            sstore(keccak256(0x00, 0x40), 0)\r\n        }\r\n    }\r\n}"
		},
		"contracts/lib/MinterStructs.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev EIP712 Domain for signature verification\r\n */\r\nstruct EIP712Domain {\r\n    string name;\r\n    string version;\r\n    uint256 chainId;\r\n    address verifyingContract;\r\n}\r\n\r\n/**\r\n * @dev MintOrders contain MintParameters as defined by a token creator\r\n *      along with proofs required to validate the MintParameters and \r\n *      parameters specific to the mint being performed.\r\n * \r\n *      `mintParameters` are the parameters signed by the token creator\r\n *      `quantity` is a multiplier for mintTokens, burnTokens and paymentTokens\r\n *          defined in mintParameters\r\n *      `mintParametersSignature` is the signature from the token creator\r\n *      `oracleSignature` is a signature of the hash of the mintParameters digest \r\n *          and msg.sender. The recovered signer must be an allowed oracle for \r\n *          the token contract if oracleSignatureRequired is true for mintParameters.\r\n *      `merkleProof` is the proof that is checked if merkleRoot is not bytes(0) in\r\n *          mintParameters\r\n *      `suppliedBurnTokenIds` is an array of tokenIds to be used when processing\r\n *          burnTokens. There must be one item in the array for each ERC1155 burnToken\r\n *          regardless of `quantity` and `quantity` items in the array for each ERC721\r\n *          burnToken.\r\n *      `referrer` is the address that will receive a portion of a paymentToken if\r\n *          not address(0) and paymentToken's referralBPS is greater than 0\r\n *      `vaultWallet` is used for allowlist mints if the msg.sender address it not on\r\n *          the allowlist but their delegate.cash vault wallet is.\r\n *      \r\n */\r\nstruct MintOrder {\r\n    MintParameters mintParameters;\r\n    uint256 quantity;\r\n    bytes mintParametersSignature;\r\n    bytes oracleSignature;\r\n    bytes32[] merkleProof;\r\n    uint256[] suppliedBurnTokenIds;\r\n    address referrer;\r\n    address vaultWallet;\r\n}\r\n\r\n/**\r\n * @dev MintParameters define the tokens to be minted and conditions that must be met\r\n *      for the mint to be successfully processed.\r\n * \r\n *      `mintTokens` is an array of tokens that will be minted\r\n *      `burnTokens` is an array of tokens required to be burned\r\n *      `paymentTokens` is an array of tokens required as payment\r\n *      `startTime` is the UTC timestamp of when the mint will start\r\n *      `endTime` is the UTC timestamp of when the mint will end\r\n *      `signatureMaxUses` limits the number of mints that can be performed with the\r\n *          specific mintParameters/signature\r\n *      `merkleRoot` is the root of the merkletree for allowlist minting\r\n *      `nonce` is the signer nonce that can be incremented on the LayerrMinter \r\n *          contract to invalidate all previous signatures\r\n *      `oracleSignatureRequired` if true requires a secondary signature to process the mint\r\n */\r\nstruct MintParameters {\r\n    MintToken[] mintTokens;\r\n    BurnToken[] burnTokens;\r\n    PaymentToken[] paymentTokens;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 signatureMaxUses;\r\n    bytes32 merkleRoot;\r\n    uint256 nonce;\r\n    bool oracleSignatureRequired;\r\n}\r\n\r\n/**\r\n * @dev Defines the token that will be minted\r\n *      \r\n *      `contractAddress` address of contract to mint tokens from\r\n *      `specificTokenId` used for ERC721 - \r\n *          if true, mint is non-sequential ERC721\r\n *          if false, mint is sequential ERC721A\r\n *      `tokenType` is the type of token being minted defined in TokenTypes.sol\r\n *      `tokenId` the tokenId to mint if specificTokenId is true\r\n *      `mintAmount` is the quantity to be minted\r\n *      `maxSupply` is checked against the total minted amount at time of mint\r\n *          minting reverts if `mintAmount` * `quantity` will cause total minted to \r\n *          exceed `maxSupply`\r\n *      `maxMintPerWallet` is checked against the number minted for the wallet\r\n *          minting reverts if `mintAmount` * `quantity` will cause wallet minted to \r\n *          exceed `maxMintPerWallet`\r\n */\r\nstruct MintToken {\r\n    address contractAddress;\r\n    bool specificTokenId;\r\n    uint256 tokenType;\r\n    uint256 tokenId;\r\n    uint256 mintAmount;\r\n    uint256 maxSupply;\r\n    uint256 maxMintPerWallet;\r\n}\r\n\r\n/**\r\n * @dev Defines the token that will be burned\r\n *      \r\n *      `contractAddress` address of contract to burn tokens from\r\n *      `specificTokenId` specifies if the user has the option of choosing any token\r\n *          from the contract or if they must burn a specific token\r\n *      `tokenType` is the type of token being burned, defined in TokenTypes.sol\r\n *      `burnType` is the type of burn to perform, burn function call or transfer to \r\n *          dead address, defined in BurnType.sol\r\n *      `tokenId` the tokenId to burn if specificTokenId is true\r\n *      `burnAmount` is the quantity to be burned\r\n */\r\nstruct BurnToken {\r\n    address contractAddress;\r\n    bool specificTokenId;\r\n    uint256 tokenType;\r\n    uint256 burnType;\r\n    uint256 tokenId;\r\n    uint256 burnAmount;\r\n}\r\n\r\n/**\r\n * @dev Defines the token that will be used for payment\r\n *      \r\n *      `contractAddress` address of contract to for payment if ERC20\r\n *          if tokenType is native token then this should be set to 0x000...000\r\n *          to save calldata gas units\r\n *      `tokenType` is the type of token being used for payment, defined in TokenTypes.sol\r\n *      `payTo` the address that will receive the payment\r\n *      `paymentAmount` the amount for the payment in base units for the token\r\n *          ex. a native payment on Ethereum for 1 ETH would be specified in wei\r\n *          which would be 1**18 wei\r\n *      `referralBPS` is the percentage of the payment in BPS that will be sent to the \r\n *          `referrer` on the MintOrder if `referralBPS` is greater than 0 and `referrer`\r\n *          is not address(0)\r\n */\r\nstruct PaymentToken {\r\n    address contractAddress;\r\n    uint256 tokenType;\r\n    address payTo;\r\n    uint256 paymentAmount;\r\n    uint256 referralBPS;\r\n}\r\n"
		},
		"contracts/lib/StorageTypes.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\n/// @dev Simple struct to store a string value in a custom storage slot\r\nstruct StringValue {\r\n    string value;\r\n}\r\n\r\n/// @dev Simple struct to store an address value in a custom storage slot\r\nstruct AddressValue {\r\n    address value;\r\n}"
		},
		"contracts/tokens/ERC721A/ERC721A.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport './IERC721A.sol';\r\n\r\n/**\r\n * @dev Interface of ERC721 token receiver.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721A\r\n *\r\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\r\n * Non-Fungible Token Standard, including the Metadata extension.\r\n * Optimized for lower gas during batch mints.\r\n *\r\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\r\n * starting from `_startTokenId()`.\r\n *\r\n * Assumptions:\r\n *\r\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\r\n    struct TokenApprovalRef {\r\n        address value;\r\n    }\r\n\r\n    // =============================================================\r\n    //                           CONSTANTS\r\n    // =============================================================\r\n\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant _BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\r\n\r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The bit position of `extraData` in packed ownership.\r\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\r\n\r\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n\r\n    // The mask of the lower 160 bits for addresses.\r\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\r\n    // This limit is to prevent overflows on the address data entries.\r\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\r\n    // is required to cause an overflow, which is unrealistic.\r\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n    // The `Transfer` event signature is given by:\r\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    // =============================================================\r\n    //                            STORAGE\r\n    // =============================================================\r\n\r\n    // The next token ID to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See {_packedOwnershipOf} implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    // - [232..255] `extraData`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // =============================================================\r\n    //                   TOKEN COUNTING OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the starting token ID.\r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view virtual returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view virtual returns (uint256) {\r\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\r\n        // and it is initialized to `_startTokenId()`.\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view virtual returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    // =============================================================\r\n    //                    ADDRESS DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) _revert(BalanceQueryForZeroAddress.selector);\r\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal virtual {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        // Cast `aux` with assembly to avoid redundant masking.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes\r\n        // of the XOR of all function selectors in the interface.\r\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\r\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) _revert(URIQueryForNonexistentToken.selector);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, it can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    // =============================================================\r\n    //                     OWNERSHIPS OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the ownership slot at `index` is initialized.\r\n     * An uninitialized slot does not necessarily mean that the slot has no owner.\r\n     */\r\n    function _ownershipIsInitialized(uint256 index) internal view virtual returns (bool) {\r\n        return _packedOwnerships[index] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal virtual {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\r\n        if (_startTokenId() <= tokenId) {\r\n            packed = _packedOwnerships[tokenId];\r\n            // If the data at the starting slot does not exist, start the scan.\r\n            if (packed == 0) {\r\n                if (tokenId >= _currentIndex) _revert(OwnerQueryForNonexistentToken.selector);\r\n                // Invariant:\r\n                // There will always be an initialized ownership slot\r\n                // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\r\n                // before an unintialized ownership slot\r\n                // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\r\n                // Hence, `tokenId` will not underflow.\r\n                //\r\n                // We can directly compare the packed value.\r\n                // If the address is zero, packed will be zero.\r\n                for (;;) {\r\n                    unchecked {\r\n                        packed = _packedOwnerships[--tokenId];\r\n                    }\r\n                    if (packed == 0) continue;\r\n                    if (packed & _BITMASK_BURNED == 0) return packed;\r\n                    // Otherwise, the token is burned, and we must revert.\r\n                    // This handles the case of batch burned tokens, where only the burned bit\r\n                    // of the starting slot is set, and remaining slots are left uninitialized.\r\n                    _revert(OwnerQueryForNonexistentToken.selector);\r\n                }\r\n            }\r\n            // Otherwise, the data exists and we can skip the scan.\r\n            // This is possible because we have already achieved the target condition.\r\n            // This saves 2143 gas on transfers of initialized tokens.\r\n            // If the token is not burned, return `packed`. Otherwise, revert.\r\n            if (packed & _BITMASK_BURNED == 0) return packed;\r\n        }\r\n        _revert(OwnerQueryForNonexistentToken.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & _BITMASK_BURNED != 0;\r\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Packs ownership data into a single uint256.\r\n     */\r\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\r\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n     */\r\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\r\n        // For branchless setting of the `nextInitialized` flag.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\r\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      APPROVAL OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     */\r\n    function approve(address to, uint256 tokenId) public payable virtual override {\r\n        _approve(to, tokenId, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) _revert(ApprovalQueryForNonexistentToken.selector);\r\n\r\n        return _tokenApprovals[tokenId].value;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted. See {_mint}.\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool result) {\r\n        if (_startTokenId() <= tokenId) {\r\n            if (tokenId < _currentIndex) {\r\n                uint256 packed;\r\n                while ((packed = _packedOwnerships[tokenId]) == 0) --tokenId;\r\n                result = packed & _BITMASK_BURNED == 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\r\n     */\r\n    function _isSenderApprovedOrOwner(\r\n        address approvedAddress,\r\n        address owner,\r\n        address msgSender\r\n    ) private pure returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\r\n            // `msgSender == owner || msgSender == approvedAddress`.\r\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n     */\r\n    function _getApprovedSlotAndAddress(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (uint256 approvedAddressSlot, address approvedAddress)\r\n    {\r\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\r\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            approvedAddressSlot := tokenApproval.slot\r\n            approvedAddress := sload(approvedAddressSlot)\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      TRANSFER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable virtual override {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n        from = address(uint160(uint256(uint160(from)) & _BITMASK_ADDRESS));\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) _revert(TransferFromIncorrectOwner.selector);\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        // The nested ifs save around 20+ gas over a compound boolean condition.\r\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n            if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                to,\r\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n        uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Emit the `Transfer` event.\r\n            log4(\r\n                0, // Start of data (0, since no data).\r\n                0, // End of data (0, since no data).\r\n                _TRANSFER_EVENT_SIGNATURE, // Signature.\r\n                from, // `from`.\r\n                toMasked, // `to`.\r\n                tokenId // `tokenId`.\r\n            )\r\n        }\r\n        if (toMasked == 0) _revert(TransferToZeroAddress.selector);\r\n\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public payable virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token IDs\r\n     * are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token IDs\r\n     * have been transferred. This includes minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * `from` - Previous owner of the given token ID.\r\n     * `to` - Target address that will receive the token.\r\n     * `tokenId` - Token ID to be transferred.\r\n     * `_data` - Optional data to send along with the call.\r\n     *\r\n     * Returns whether the call correctly returned the expected magic value.\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\r\n            }\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                revert(add(32, reason), mload(reason))\r\n            }\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                        MINT OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _mint(address minter, address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n        // `tokenId` has a maximum limit of 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            if(minter == to) {\r\n                _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n            } else {\r\n                _packedAddressData[minter] += quantity * (1 << _BITPOS_NUMBER_MINTED);\r\n                _packedAddressData[to] += quantity;\r\n            }\r\n\r\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\r\n\r\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\r\n\r\n            uint256 end = startTokenId + quantity;\r\n            uint256 tokenId = startTokenId;\r\n\r\n            do {\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    // Emit the `Transfer` event.\r\n                    log4(\r\n                        0, // Start of data (0, since no data).\r\n                        0, // End of data (0, since no data).\r\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\r\n                        0, // `address(0)`.\r\n                        toMasked, // `to`.\r\n                        tokenId // `tokenId`.\r\n                    )\r\n                }\r\n                // The `!=` check ensures that large values of `quantity`\r\n                // that overflows uint256 will make the loop run out of gas.\r\n            } while (++tokenId != end);\r\n\r\n            _currentIndex = end;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * This function is intended for efficient minting only during contract creation.\r\n     *\r\n     * It emits only one {ConsecutiveTransfer} as defined in\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n     * instead of a sequence of {Transfer} event(s).\r\n     *\r\n     * Calling this function outside of contract creation WILL make your contract\r\n     * non-compliant with the ERC721 standard.\r\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {ConsecutiveTransfer} event.\r\n     */\r\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) _revert(MintToZeroAddress.selector);\r\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\r\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) _revert(MintERC2309QuantityExceedsLimit.selector);\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\r\n\r\n            _currentIndex = startTokenId + quantity;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * See {_mint}.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _safeMint(\r\n        address minter,\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(minter, to, quantity);\r\n\r\n        unchecked {\r\n            if (to.code.length != 0) {\r\n                uint256 end = _currentIndex;\r\n                uint256 index = end - quantity;\r\n                do {\r\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n                        _revert(TransferToNonERC721ReceiverImplementer.selector);\r\n                    }\r\n                } while (index < end);\r\n                // Reentrancy protection.\r\n                if (_currentIndex != end) _revert(bytes4(0));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address minter, address to, uint256 quantity) internal virtual {\r\n        _safeMint(minter, to, quantity, '');\r\n    }\r\n\r\n    // =============================================================\r\n    //                       APPROVAL OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _approve(to, tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        bool approvalCheck\r\n    ) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        if (approvalCheck && _msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                _revert(ApprovalCallerNotOwnerNorApproved.selector);\r\n            }\r\n\r\n        _tokenApprovals[tokenId].value = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    // =============================================================\r\n    //                        BURN OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        if (approvalCheck) {\r\n            // The nested ifs save around 20+ gas over a compound boolean condition.\r\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n                if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                from,\r\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                     EXTRA DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Directly sets the extra data for the ownership data `index`.\r\n     */\r\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\r\n        uint256 packed = _packedOwnerships[index];\r\n        if (packed == 0) _revert(OwnershipNotInitializedForExtraData.selector);\r\n        uint256 extraDataCasted;\r\n        // Cast `extraData` with assembly to avoid redundant masking.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            extraDataCasted := extraData\r\n        }\r\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\r\n        _packedOwnerships[index] = packed;\r\n    }\r\n\r\n    /**\r\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n     * Intended to be overridden by the cosumer contract.\r\n     *\r\n     * `previousExtraData` - the value of `extraData` before transfer.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _extraData(\r\n        address from,\r\n        address to,\r\n        uint24 previousExtraData\r\n    ) internal view virtual returns (uint24) {}\r\n\r\n    /**\r\n     * @dev Returns the next extra data for the packed ownership data.\r\n     * The returned result is shifted into position.\r\n     */\r\n    function _nextExtraData(\r\n        address from,\r\n        address to,\r\n        uint256 prevOwnershipPacked\r\n    ) private view returns (uint256) {\r\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\r\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\r\n    }\r\n\r\n    // =============================================================\r\n    //                       OTHER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\r\n            let m := add(mload(0x40), 0xa0)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, m)\r\n            // Assign the `str` to the end.\r\n            str := sub(m, 0x20)\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // prettier-ignore\r\n            for { let temp := value } 1 {} {\r\n                str := sub(str, 1)\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                // prettier-ignore\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n            // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev For more efficient reverts.\r\n     */\r\n    function _revert(bytes4 errorSelector) internal pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, errorSelector)\r\n            revert(0x00, 0x04)\r\n        }\r\n    }\r\n}"
		},
		"contracts/tokens/ERC721A/IERC721A.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of ERC721A.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the\r\n     * ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    /**\r\n     * Cannot mint a token that already exists.\r\n     */\r\n    error TokenAlreadyExists();\r\n\r\n    // =============================================================\r\n    //                            STRUCTS\r\n    // =============================================================\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Stores the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\r\n        uint24 extraData;\r\n    }\r\n\r\n    // =============================================================\r\n    //                         TOKEN COUNTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                            IERC721\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables\r\n     * (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\r\n     * checking first that contract recipients are aware of the ERC721 protocol\r\n     * to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move\r\n     * this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\r\n     * whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external payable;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                           IERC2309\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\r\n     * (inclusive) is transferred from `from` to `to`, as defined in the\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\r\n     *\r\n     * See {_mintERC2309} for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}"
		},
		"contracts/tokens/ERC721A/Layerr721A.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./ERC721A.sol\";\r\nimport {IERC4906} from \"../../interfaces/IERC4906.sol\";\r\nimport {ILayerr721A} from \"../../interfaces/ILayerr721A.sol\";\r\nimport {ILayerrRenderer} from \"../../interfaces/ILayerrRenderer.sol\";\r\nimport {LayerrToken} from \"../LayerrToken.sol\";\r\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\r\n\r\n/**\r\n * @title Layerr721A\r\n * @author 0xth0mas (Layerr)\r\n * @notice Layerr721A is an ERC721 contract built for the Layerr platform using\r\n *         the Chiru Labs ERC721A implementation for gas efficient sequential \r\n *         minting.\r\n */\r\ncontract Layerr721A is DefaultOperatorFilterer, ERC721A, ILayerr721A, LayerrToken, IERC4906 {\r\n\r\n    /** METADATA FUNCTIONS */\r\n\r\n    /**\r\n     * @notice Returns the URI for a given `tokenId`\r\n     * @param tokenId id of token to return URI of\r\n     * @return tokenURI location of the token metadata\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        return ILayerrRenderer(_getRenderer()).tokenURI(address(this), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the URI for the contract metadata\r\n     * @return contractURI location of the contract metadata\r\n     */\r\n    function contractURI() public view returns (string memory) {\r\n        return ILayerrRenderer(_getRenderer()).contractURI(address(this));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc LayerrToken\r\n     */\r\n    function name() public view virtual override(LayerrToken, ERC721A) returns (string memory) {\r\n        return LayerrToken.name();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc LayerrToken\r\n     */\r\n    function symbol() public view virtual override(LayerrToken, ERC721A) returns (string memory) {\r\n        return LayerrToken.symbol();\r\n    }\r\n\r\n    /** MINT FUNCTIONS */\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function mintSequential(address minter, address to, uint256 quantity) external onlyMinter {\r\n        _mint(minter, to, quantity);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function burnTokenId(address from, uint256 tokenId) external {\r\n        if (!isApprovedForAll(from, msg.sender)) {\r\n            revert NotAuthorized();\r\n        }\r\n        if(ownerOf(tokenId) != from) { revert NotAuthorized(); }\r\n        _burn(tokenId, true);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function burnBatchTokenIds(\r\n        address from,\r\n        uint256[] calldata tokenIds\r\n    ) external {\r\n        if (!isApprovedForAll(from, msg.sender)) {\r\n            revert NotAuthorized();\r\n        }\r\n        for(uint256 i = 0;i < tokenIds.length;) {\r\n            uint256 tokenId = tokenIds[i];\r\n\r\n            if(ownerOf(tokenId) != from) { revert NotAuthorized(); }\r\n            _burn(tokenId, true);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function totalSupply() public view override(ERC721A, ILayerr721A) returns (uint256) {\r\n        return ERC721A.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function totalMintedCollectionAndMinter(address minter) external view returns(uint256 totalMinted, uint256 minterMinted) {\r\n        totalMinted = _totalMinted();\r\n        minterMinted = _numberMinted(minter);\r\n    }\r\n\r\n    /** OWNER FUNCTIONS */\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function airdrop(address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {\r\n        if(recipients.length != amounts.length) { revert ArrayLengthMismatch(); }\r\n\r\n        for(uint256 index = 0;index < recipients.length;) {\r\n            _mint(msg.sender, recipients[index], amounts[index]);\r\n\r\n            unchecked { ++index; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Subscribes to an operator filter registry\r\n     * @param operatorFilterRegistry operator filter address to subscribe to\r\n     */\r\n    function setOperatorFilter(address operatorFilterRegistry) external onlyOwner {\r\n        if (operatorFilterRegistry != address(0)) {\r\n            OPERATOR_FILTER_REGISTRY.registerAndSubscribe(\r\n                address(this),\r\n                operatorFilterRegistry\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Unsubscribes from the operator filter registry\r\n     */\r\n    function removeOperatorFilter() external onlyOwner {\r\n        OPERATOR_FILTER_REGISTRY.unregister(\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function updateMetadataAllTokens() external onlyOwner {\r\n        emit BatchMetadataUpdate(0, type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerr721A\r\n     */\r\n    function updateMetadataSpecificTokens(uint256[] calldata tokenIds) external onlyOwner {\r\n        for(uint256 i; i < tokenIds.length; ) {\r\n            emit MetadataUpdate(tokenIds[i]);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /** OPERATOR FILTER OVERRIDES */\r\n\r\n    function setApprovalForAll(\r\n        address operator,\r\n        bool approved\r\n    ) public override onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    function approve(\r\n        address operator,\r\n        uint256 tokenId\r\n    ) public payable override onlyAllowedOperatorApproval(operator) {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable override onlyAllowedOperator(from) {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable override onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public payable override onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\r\n    /** ERC165 */\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override(LayerrToken, ERC721A) returns (bool) {\r\n        return\r\n            interfaceId == type(ILayerr721A).interfaceId ||\r\n            LayerrToken.supportsInterface(interfaceId) ||\r\n            ERC721A.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
		},
		"contracts/tokens/LayerrToken.sol": {
			"content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.20;\r\n\r\nimport {AddressValue, StringValue} from \"../lib/StorageTypes.sol\";\r\nimport {LAYERRTOKEN_NAME_SLOT, LAYERRTOKEN_SYMBOL_SLOT, LAYERRTOKEN_RENDERER_SLOT} from \"../common/LayerrStorage.sol\";\r\nimport {LayerrOwnable} from \"../common/LayerrOwnable.sol\";\r\nimport {ILayerrToken} from \"../interfaces/ILayerrToken.sol\";\r\nimport {ILayerrMinter} from \"../interfaces/ILayerrMinter.sol\";\r\nimport {ERC2981} from \"../lib/ERC2981.sol\";\r\n\r\n/**\r\n * @title LayerrToken\r\n * @author 0xth0mas (Layerr)\r\n * @notice LayerrToken contains the general purpose token contract functions for interacting\r\n *         with the Layerr platform.\r\n */\r\ncontract LayerrToken is ILayerrToken, LayerrOwnable, ERC2981 {\r\n\r\n    /// @dev mapping of allowed mint extensions\r\n    mapping(address => bool) public mintingExtensions;\r\n\r\n    modifier onlyMinter() {\r\n        if (!mintingExtensions[msg.sender]) {\r\n            revert NotValidMintingExtension();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function name() public virtual view returns(string memory _name) {\r\n        StringValue storage nameValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            nameValue.slot := LAYERRTOKEN_NAME_SLOT\r\n        }\r\n        _name = nameValue.value;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function symbol() public virtual view returns(string memory _symbol) {\r\n        StringValue storage symbolValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            symbolValue.slot := LAYERRTOKEN_SYMBOL_SLOT\r\n        }\r\n        _symbol = symbolValue.value;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function renderer() external view returns(address _renderer) {\r\n        _renderer = _getRenderer();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(LayerrOwnable, ERC2981) returns (bool) {\r\n        return interfaceId == type(ILayerrToken).interfaceId ||\r\n            ERC2981.supportsInterface(interfaceId) ||\r\n            LayerrOwnable.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /* OWNER FUNCTIONS */\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setRenderer(address _renderer) external onlyOwner {\r\n        _setRenderer(_renderer);\r\n\r\n        emit RendererUpdated(_renderer);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setMintExtension(\r\n        address _extension,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        mintingExtensions[_extension] = _allowed;\r\n\r\n        emit MintExtensionUpdated(_extension, _allowed);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setContractAllowedSigner(\r\n        address _extension,\r\n        address _signer,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        ILayerrMinter(_extension).setContractAllowedSigner(_signer, _allowed);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setContractAllowedOracle(\r\n        address _extension,\r\n        address _oracle,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        ILayerrMinter(_extension).setContractAllowedOracle(_oracle, _allowed);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setSignatureValidity(\r\n        address _extension,\r\n        bytes32[] calldata signatureDigests,\r\n        bool invalid\r\n    ) external onlyOwner {\r\n        ILayerrMinter(_extension).setSignatureValidity(signatureDigests, invalid);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function setRoyalty(\r\n        uint96 pct,\r\n        address royaltyReciever\r\n    ) external onlyOwner {\r\n        _setDefaultRoyalty(royaltyReciever, pct);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ILayerrToken\r\n     */\r\n    function editContract(\r\n        string calldata _name,\r\n        string calldata _symbol\r\n    ) external onlyOwner {\r\n        _setName(_name);\r\n        _setSymbol(_symbol);\r\n    }\r\n\r\n    /**\r\n     * @notice Called during a proxy deployment to emit the LayerrContractDeployed event\r\n     */\r\n    function initialize() external onlyOwner {\r\n        emit LayerrContractDeployed();\r\n    }\r\n\r\n    /**\r\n     * @notice Called to withdraw any funds that may be sent to the contract\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        (bool sent, ) = payable(_getOwner()).call{value: address(this).balance}(\"\");\r\n        if (!sent) {\r\n            revert WithdrawFailed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  INTERNAL FUNCTIONS\r\n     */\r\n\r\n    /**\r\n     * @notice Internal function to set the renderer address in a custom storage slot location\r\n     * @param _renderer address of the renderer to set\r\n     */\r\n    function _setRenderer(address _renderer) internal {\r\n        AddressValue storage rendererValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            rendererValue.slot := LAYERRTOKEN_RENDERER_SLOT\r\n        }\r\n        rendererValue.value = _renderer;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to get the renderer address from a custom storage slot location\r\n     * @return _renderer address of the renderer\r\n     */\r\n    function _getRenderer() internal view returns(address _renderer) {\r\n        AddressValue storage rendererValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            rendererValue.slot := LAYERRTOKEN_RENDERER_SLOT\r\n        }\r\n        _renderer = rendererValue.value;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to set the token contract name in a custom storage slot location\r\n     * @param _name name for the token contract\r\n     */\r\n    function _setName(string calldata _name) internal {\r\n        StringValue storage nameValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            nameValue.slot := LAYERRTOKEN_NAME_SLOT\r\n        }\r\n        nameValue.value = _name;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to set the token contract symbol in a custom storage slot location\r\n     * @param _symbol symbol for the token contract\r\n     */\r\n    function _setSymbol(string calldata _symbol) internal {\r\n        StringValue storage symbolValue;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            symbolValue.slot := LAYERRTOKEN_SYMBOL_SLOT\r\n        }\r\n        symbolValue.value = _symbol;\r\n    }\r\n}"
		},
		"operator-filter-registry/src/DefaultOperatorFilterer.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"./lib/Constants.sol\";\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
		},
		"operator-filter-registry/src/IOperatorFilterRegistry.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
		},
		"operator-filter-registry/src/lib/Constants.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
		},
		"operator-filter-registry/src/OperatorFilterer.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"./lib/Constants.sol\";\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
		}
	},
	"settings": {
		"optimizer": {
			"enabled": true,
			"runs": 33333
		},
		"evmVersion": "paris",
		"viaIR": true,
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"evm.bytecode",
					"evm.deployedBytecode",
					"evm.methodIdentifiers",
					"metadata"
				],
				"": [
					"ast"
				]
			}
		}
	}
}